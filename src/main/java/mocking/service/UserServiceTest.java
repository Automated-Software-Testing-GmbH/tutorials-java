/*
* DO NOT MODIFY THIS COMMENT
* Generated by devmate
* Test model: bc02d4a7-b6d5-4d38-9e1b-350835ddc174
*/
package mocking.service;

import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;
import java.util.stream.Stream;

import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;

import mocking.repository.ISimpleAddUserRepository;

import models.User;

@SuppressWarnings("unused")
public class UserServiceTest {
	
// region Factories
	private static ISimpleAddUserRepository MockSimpleAddUserRepository(String name, Integer age, String bio) {
		ISimpleAddUserRepository mockRepo = mock(ISimpleAddUserRepository.class);
		User expected = new User(name, age, bio);
		when(mockRepo.execute(any())).thenReturn(expected);
		return mockRepo;
	}
// endregion

// region Scenarios
	//A new scenario
	@ParameterizedTest(name = "{1} [{index}] {2}")
	@MethodSource({"Scenario1Source"})
	public void Scenario1Test(Scenario1TestData data, String TestName, String TestDescription) {
		ActualResultStorage.setStorage(); //saves the results of the called Methods
		assertion(data, data.S1M1.methodName, data.C1, data.S1M1.expectedResult, data.S1M1.call());
	}
// endregion

//region Data

//========================================================
// Only modify this section in the DevMate editor
//=========================================================
	//A new scenario
	private static Stream<Arguments> Scenario1Source() {
		return Stream.of(
			Arguments.of(
				new Scenario1TestData(
					/* UserService C1 = */ new UserService(MockSimpleAddUserRepository("John Brook", 34, "No bio available")),
					/* S1M1 = */ new S1M1Parameters<>(
						/* String name = */ "John Brook",
						/* String age = */ "34",
						/* referencingMethodName = */ new String[2],
						/* expectedResult = */ new Result<>(
							/* assertType = */ AssertType.EXPECTED_VALUE,
							/* expectedReturnValue = */ new User("John Brook", 34, "No bio available")
						)
					)
				),
				/* testCaseName = */ "p1",
				/* testCaseDescription = */ ""
			),
			Arguments.of(
				new Scenario1TestData(
					/* UserService C1 = */ new UserService(MockSimpleAddUserRepository("John Brook", 34, "No bio available")),
					/* S1M1 = */ new S1M1Parameters<>(
						/* String name = */ "FM",
						/* String age = */ "34",
						/* referencingMethodName = */ new String[2],
						/* expectedResult = */ new Result<>(
							/* assertType = */ AssertType.EXCEPTION,
							/* expectedException = */ Exception.class
						)
					)
				),
				/* testCaseName = */ "n1",
				/* testCaseDescription = */ "M1:name: invalid"
			)
		);
	}
//endregion

//region Types

//=========================================================================================================================
//Please modify this section only in the Modeleditor not here in the code, because otherwise it will cause merge conflicts!
//=========================================================================================================================
	static class Scenario1TestData {
	    public final UserService C1;
	    public final S1M1Parameters<Scenario1TestData> S1M1;
	    
	    public Scenario1TestData(UserService C1, S1M1Parameters<Scenario1TestData> S1M1) {
	    	this.C1 = C1;
	    	this.S1M1 = S1M1;
	    }
	}

	static class S1M1Parameters<TestData> {
		public final String methodName = "S1M1";
	    public final ObjectWrapper<String> name;
	    public final ObjectWrapper<String> age;
	    public final Result<TestData, UserService, User> expectedResult;
		public S1M1Parameters(String name, String age, String[] referencingMethodName, Result<TestData, UserService, User> expectedResult) {
			this.name = new ObjectWrapper<>(name, referencingMethodName[0]);
			this.age = new ObjectWrapper<>(age, referencingMethodName[1]);
	   		this.expectedResult = expectedResult;
	    }
	    
	    public ExceptionFunction<UserService, User> call() {
	    	return i ->
	    	 i.simpleAddUser(name.get(), age.get());
		}
	}
//endregion

//region Utility Classes

//=========================================================================================================================
//Please modify this section only in the Modeleditor not here in the code, because otherwise it will cause merge conflicts!
//=========================================================================================================================
	public static class ObjectWrapper<T> {
		public T object;
		public String referencingMethodName;
		
		public ObjectWrapper(T object, String referencingMethodName) {
			this.object = object;
			this.referencingMethodName = referencingMethodName;
		}
		
		public T get() {
			return ActualResultStorage.getOrDefault(referencingMethodName, object);
		}
	}
	
	public static class ActualResultStorage {
		private static Map<String, Object> actualResultMap = new HashMap<>();
		
		public static void setStorage() {
			actualResultMap = new HashMap<>();
		}
		
		public static <T> void put(String key, T value) {
			actualResultMap.put(key, value);
		}
		
		@SuppressWarnings("unchecked")
		public static <T> T getOrDefault(String key, T defaultValue) {
			return (T) actualResultMap.getOrDefault(key, defaultValue);
		}
	}
	
	static class Result<TestData, TInstance, TReturn> {
		public final AssertType assertType;
		public final TReturn expectedReturnValue;
		public final Class<? extends Throwable> expectedException;
		public final BiConsumer<TInstance, TReturn> customAction;
		public final List<SideEffect<TestData>> sideEffects;
		
		public Result(AssertType assertType) {
			this(assertType, (TReturn) null, null);
		}
	
		public Result(AssertType assertType, List<SideEffect<TestData>> sideEffects) {
			this(assertType, (TReturn) null, sideEffects);
		}
	
		public Result(AssertType assertType, TReturn expectedReturnValue) {
			this(assertType, expectedReturnValue, null);
		}
	
		public Result(AssertType assertType, Class<? extends Throwable> expectedException) {
			this(assertType, expectedException, null);
		}
	
		public Result(AssertType assertType, BiConsumer<TInstance, TReturn> customAction) {
			this(assertType, customAction, null);
		}
	
		public Result(AssertType assertType, TReturn expectedReturnValue, List<SideEffect<TestData>> sideEffects) {
			this(assertType, expectedReturnValue, null, null, sideEffects);
		}
	
		public Result(AssertType assertType, Class<? extends Throwable> expectedException, List<SideEffect<TestData>> sideEffects) {
			this(assertType, null, expectedException, null, sideEffects);
		}
	
		public Result(AssertType assertType, BiConsumer<TInstance, TReturn> customAction, List<SideEffect<TestData>> sideEffects) {
			this(assertType, null, null, customAction, sideEffects);
		}
	
		public Result(AssertType assertType, TReturn expectedReturnValue, Class<? extends Throwable> expectedException,
			BiConsumer<TInstance, TReturn> customAction, List<SideEffect<TestData>> sideEffects) {
			this.assertType = assertType;
			this.expectedReturnValue = expectedReturnValue;
			this.expectedException = expectedException;
			this.customAction = customAction;
			this.sideEffects = sideEffects;
		}
	}
	
	static class SideEffect<TestData> {
	    public final Object expectedValue;
	    public final Function<TestData, Object> actualValueAccessor;
	    
		public SideEffect(Object expectedValue, Function<TestData, Object> actualValueAccessor) {
			this.expectedValue = expectedValue;
			this.actualValueAccessor = actualValueAccessor;
		}
	}
	
	public enum AssertType {
	    EXCEPTION, EXPECTED_VALUE, CUSTOM_ASSERTION
	}
	
	static class VoidR {
	}
	
	private static <I> ExceptionFunction<I, VoidR> asFunc(ExceptionConsumer<I> action) {
		return i -> {
			action.accept(i);
			return null;
		};
	}
	
	@FunctionalInterface
	public interface ExceptionFunction<I, R> {
		R apply(I i) throws Exception;
	}
	
	@FunctionalInterface
	public interface ExceptionConsumer<I> {
		void accept(I i) throws Exception;
	}
	
	private <TestData, I, R> void assertion(TestData data, String methodName, I instance, Result<TestData, I, R> expectedResult, ExceptionFunction<I, R> toApply) {
		if (expectedResult == null) {
			ActualResultStorage.put(methodName, assertDoesNotThrow(() -> toApply.apply(instance)));
			return;
		}
		R actualResult = null;
		if (expectedResult.assertType.equals(AssertType.EXCEPTION)) {
			assertThrows(expectedResult.expectedException, () -> toApply.apply(instance));
		} else {
			actualResult = assertDoesNotThrow(() -> toApply.apply(instance));
			if (expectedResult.assertType.equals(AssertType.EXPECTED_VALUE) &&
					!(expectedResult.expectedReturnValue instanceof VoidR)) {
				assertEquals(expectedResult.expectedReturnValue, actualResult);
			} else if (expectedResult.assertType.equals(AssertType.CUSTOM_ASSERTION)) {
				expectedResult.customAction.accept(instance, actualResult);
			}
			if (expectedResult.sideEffects != null) {
				for (var sideEffect : expectedResult.sideEffects) {
					var sideEffectResult = sideEffect.actualValueAccessor.apply(data);
					assertEquals(sideEffect.expectedValue, sideEffectResult);
				}
			}
		}
		ActualResultStorage.put(methodName, actualResult);
	}
//endregion
}

/*
WARNING: Modification of this comment will make it impossible to merge user-defined changes

BEGIN_CODEGEN_DATA
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
END_CODEGEN_DATA
*/
