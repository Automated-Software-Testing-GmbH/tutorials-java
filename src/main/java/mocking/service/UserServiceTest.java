/*
* DO NOT MODIFY THIS COMMENT
* Generated by devmate
* Test model: de6d5a8e-3fe9-436d-8486-b482a5dcdc5d
*/
package mocking.service;

import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;
import java.util.stream.Stream;

import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;

import mocking.repository.ISimpleAddUserRepository;

import models.User;

@SuppressWarnings("unused")
public class UserServiceTest {
	
//region Factories
	private static ISimpleAddUserRepository MockAddUserRepository() {
		return mock(ISimpleAddUserRepository.class);
	}
//endregion

//region Scenarios
	//A new scenario
	@ParameterizedTest(name = "{1} [{index}] {2}")
	@MethodSource({"Scenario1Source"})
	public void Scenario1Test(Scenario1TestData data, String TestName, String TestDescription) {
		ActualResultStorage.setStorage(); //saves the results of the called Methods
		
		assertion(data, data.S1M1.methodName, data.C1, data.S1M1.expectedResult, data.S1M1.call());
	}
//endregion

//region Data

//=========================================================================================================================
//Please modify this section only in the Modeleditor not here in the code, because otherwise it will cause merge conflicts!
//=========================================================================================================================
	//A new scenario
	private static Stream<Arguments> Scenario1Source() {
		return Stream.of(
			Arguments.of(
				new Scenario1TestData(
					/* UserService C1 = */ new UserService(),
					/* S1M1 = */ new S1M1Parameters<>(
						/* ISimpleAddUserRepository simpleAddRepository = */ MockAddUserRepository(),
						/* String name = */ "John Brook",
						/* String age = */ "34",
						/* referencingMethodName = */ new String[3],
						/* expectedResult = */ new Result<>(
							/* assertType = */ AssertType.EXPECTED_VALUE,
							/* expectedReturnValue = */ new User("John Brook", 34, "No bio available")
						)
					)
				),
				/* testCaseName = */ "p1",
				/* testCaseDescription = */ ""
			),
			Arguments.of(
				new Scenario1TestData(
					/* UserService C1 = */ new UserService(),
					/* S1M1 = */ new S1M1Parameters<>(
						/* ISimpleAddUserRepository simpleAddRepository = */ MockAddUserRepository(),
						/* String name = */ "John Brook",
						/* String age = */ "17",
						/* referencingMethodName = */ new String[3],
						/* expectedResult = */ new Result<>(
							/* assertType = */ AssertType.EXCEPTION,
							/* expectedException = */ Exception.class
						)
					)
				),
				/* testCaseName = */ "n1",
				/* testCaseDescription = */ "M1:age: invalid"
			),
			Arguments.of(
				new Scenario1TestData(
					/* UserService C1 = */ new UserService(),
					/* S1M1 = */ new S1M1Parameters<>(
						/* ISimpleAddUserRepository simpleAddRepository = */ MockAddUserRepository(),
						/* String name = */ "FM",
						/* String age = */ "34",
						/* referencingMethodName = */ new String[3],
						/* expectedResult = */ new Result<>(
							/* assertType = */ AssertType.EXCEPTION,
							/* expectedException = */ Exception.class
						)
					)
				),
				/* testCaseName = */ "n2",
				/* testCaseDescription = */ "M1:name: invalid"
			)
		);
	}
//endregion

//region Types

//=========================================================================================================================
//Please modify this section only in the Modeleditor not here in the code, because otherwise it will cause merge conflicts!
//=========================================================================================================================
	static class Scenario1TestData {
	    public final UserService C1;
	    public final S1M1Parameters<Scenario1TestData> S1M1;
	    
	    public Scenario1TestData(UserService C1, S1M1Parameters<Scenario1TestData> S1M1) {
	    	this.C1 = C1;
	    	this.S1M1 = S1M1;
	    }
	}

	static class S1M1Parameters<TestData> {
		public final String methodName = "S1M1";
	    public final ObjectWrapper<ISimpleAddUserRepository> simpleAddRepository;
	    public final ObjectWrapper<String> name;
	    public final ObjectWrapper<String> age;
	    public final Result<TestData, UserService, User> expectedResult;
		public S1M1Parameters(ISimpleAddUserRepository simpleAddRepository, String name, String age, String[] referencingMethodName, Result<TestData, UserService, User> expectedResult) {
			this.simpleAddRepository = new ObjectWrapper<>(simpleAddRepository, referencingMethodName[0]);
			this.name = new ObjectWrapper<>(name, referencingMethodName[1]);
			this.age = new ObjectWrapper<>(age, referencingMethodName[2]);
	   		this.expectedResult = expectedResult;
	    }
	    
	    public ExceptionFunction<UserService, User> call() {
	    	return i ->
	    	 i.simpleAddUser(simpleAddRepository.get(), name.get(), age.get());
		}
	}
//endregion

//region Utility Classes

//=========================================================================================================================
//Please modify this section only in the Modeleditor not here in the code, because otherwise it will cause merge conflicts!
//=========================================================================================================================
	public static class ObjectWrapper<T> {
		public T object;
		public String referencingMethodName;
		
		public ObjectWrapper(T object, String referencingMethodName) {
			this.object = object;
			this.referencingMethodName = referencingMethodName;
		}
		
		public T get() {
			return ActualResultStorage.getOrDefault(referencingMethodName, object);
		}
	}
	
	public static class ActualResultStorage {
		private static Map<String, Object> actualResultMap = new HashMap<>();
		
		public static void setStorage() {
			actualResultMap = new HashMap<>();
		}
		
		public static <T> void put(String key, T value) {
			actualResultMap.put(key, value);
		}
		
		@SuppressWarnings("unchecked")
		public static <T> T getOrDefault(String key, T defaultValue) {
			return (T) actualResultMap.getOrDefault(key, defaultValue);
		}
	}
	
	static class Result<TestData, TInstance, TReturn> {
		public final AssertType assertType;
		public final TReturn expectedReturnValue;
		public final Class<? extends Throwable> expectedException;
		public final BiConsumer<TInstance, TReturn> customAction;
		public final List<SideEffect<TestData>> sideEffects;
		
		public Result(AssertType assertType) {
			this(assertType, (TReturn) null, null);
		}
	
		public Result(AssertType assertType, List<SideEffect<TestData>> sideEffects) {
			this(assertType, (TReturn) null, sideEffects);
		}
	
		public Result(AssertType assertType, TReturn expectedReturnValue) {
			this(assertType, expectedReturnValue, null);
		}
	
		public Result(AssertType assertType, Class<? extends Throwable> expectedException) {
			this(assertType, expectedException, null);
		}
	
		public Result(AssertType assertType, BiConsumer<TInstance, TReturn> customAction) {
			this(assertType, customAction, null);
		}
	
		public Result(AssertType assertType, TReturn expectedReturnValue, List<SideEffect<TestData>> sideEffects) {
			this(assertType, expectedReturnValue, null, null, sideEffects);
		}
	
		public Result(AssertType assertType, Class<? extends Throwable> expectedException, List<SideEffect<TestData>> sideEffects) {
			this(assertType, null, expectedException, null, sideEffects);
		}
	
		public Result(AssertType assertType, BiConsumer<TInstance, TReturn> customAction, List<SideEffect<TestData>> sideEffects) {
			this(assertType, null, null, customAction, sideEffects);
		}
	
		public Result(AssertType assertType, TReturn expectedReturnValue, Class<? extends Throwable> expectedException,
			BiConsumer<TInstance, TReturn> customAction, List<SideEffect<TestData>> sideEffects) {
			this.assertType = assertType;
			this.expectedReturnValue = expectedReturnValue;
			this.expectedException = expectedException;
			this.customAction = customAction;
			this.sideEffects = sideEffects;
		}
	}
	
	static class SideEffect<TestData> {
	    public final Object expectedValue;
	    public final Function<TestData, Object> actualValueAccessor;
	    
		public SideEffect(Object expectedValue, Function<TestData, Object> actualValueAccessor) {
			this.expectedValue = expectedValue;
			this.actualValueAccessor = actualValueAccessor;
		}
	}
	
	public enum AssertType {
	    EXCEPTION, EXPECTED_VALUE, CUSTOM_ASSERTION
	}
	
	static class VoidR {
	}
	
	private static <I> ExceptionFunction<I, VoidR> asFunc(ExceptionConsumer<I> action) {
		return i -> {
			action.accept(i);
			return null;
		};
	}
	
	@FunctionalInterface
	public interface ExceptionFunction<I, R> {
		R apply(I i) throws Exception;
	}
	
	@FunctionalInterface
	public interface ExceptionConsumer<I> {
		void accept(I i) throws Exception;
	}
	
	private <TestData, I, R> void assertion(TestData data, String methodName, I instance, Result<TestData, I, R> expectedResult, ExceptionFunction<I, R> toApply) {
		if (expectedResult == null) {
			ActualResultStorage.put(methodName, assertDoesNotThrow(() -> toApply.apply(instance)));
			return;
		}
		R actualResult = null;
		if (expectedResult.assertType.equals(AssertType.EXCEPTION)) {
			assertThrows(expectedResult.expectedException, () -> toApply.apply(instance));
		} else {
			actualResult = assertDoesNotThrow(() -> toApply.apply(instance));
			if (expectedResult.assertType.equals(AssertType.EXPECTED_VALUE) &&
					!(expectedResult.expectedReturnValue instanceof VoidR)) {
				assertEquals(expectedResult.expectedReturnValue, actualResult);
			} else if (expectedResult.assertType.equals(AssertType.CUSTOM_ASSERTION)) {
				expectedResult.customAction.accept(instance, actualResult);
			}
			if (expectedResult.sideEffects != null) {
				for (var sideEffect : expectedResult.sideEffects) {
					var sideEffectResult = sideEffect.actualValueAccessor.apply(data);
					assertEquals(sideEffect.expectedValue, sideEffectResult);
				}
			}
		}
		ActualResultStorage.put(methodName, actualResult);
	}
//endregion
}

/*
WARNING: Modification of this comment will make it impossible to merge user-defined changes

BEGIN_CODEGEN_DATA
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
END_CODEGEN_DATA
*/
