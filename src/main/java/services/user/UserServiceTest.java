/*
* DO NOT MODIFY THIS COMMENT
* Generated by devmate
* Test model: def48277-6484-4f9f-8be5-c40e32804558
*/
package services.user;

import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;
import java.util.stream.Stream;

import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;

@SuppressWarnings("unused")
public class UserServiceTest {
	
//region Factories
	private static UserService UserServiceFactory() {
		// TODO implement factory
		return new UserService();
	}
//endregion

//region Scenarios
	//A new scenario
	@ParameterizedTest(name = "{1} [{index}] {2}")
	@MethodSource({"Scenario1Source"})
	public void Scenario1Test(Scenario1TestData data, String TestName, String TestDescription) {
		ActualResultStorage.setStorage(); //saves the results of the called Methods
		
		assertion(data, data.S1M1.methodName, data.C1, data.S1M1.expectedResult, data.S1M1.call());
	}
//endregion

//region Data

//=========================================================================================================================
//Please modify this section only in the Modeleditor not here in the code, because otherwise it will cause merge conflicts!
//=========================================================================================================================
	//A new scenario
	private static Stream<Arguments> Scenario1Source() {
		return Stream.of(
			Arguments.of(
				new Scenario1TestData(
					/* UserService C1 = */ UserServiceFactory(),
					/* S1M1 = */ new S1M1Parameters<>(
						/* String name = */ "Freddy May",
						/* String age = */ "35",
						/* referencingMethodName = */ new String[2],
						/* expectedResult = */ new Result<>(
							/* assertType = */ AssertType.EXPECTED_VALUE,
							/* expectedReturnValue = */ true
						)
					)
				),
				/* testCaseName = */ "p1",
				/* testCaseDescription = */ ""
			),
			Arguments.of(
				new Scenario1TestData(
					/* UserService C1 = */ UserServiceFactory(),
					/* S1M1 = */ new S1M1Parameters<>(
						/* String name = */ "Freddy May",
						/* String age = */ "17",
						/* referencingMethodName = */ new String[2],
						/* expectedResult = */ new Result<>(
							/* assertType = */ AssertType.EXPECTED_VALUE,
							/* expectedReturnValue = */ false
						)
					)
				),
				/* testCaseName = */ "n1",
				/* testCaseDescription = */ "M1:age: Too Young"
			),
			Arguments.of(
				new Scenario1TestData(
					/* UserService C1 = */ UserServiceFactory(),
					/* S1M1 = */ new S1M1Parameters<>(
						/* String name = */ "Freddy May",
						/* String age = */ "121",
						/* referencingMethodName = */ new String[2],
						/* expectedResult = */ new Result<>(
							/* assertType = */ AssertType.EXPECTED_VALUE,
							/* expectedReturnValue = */ false
						)
					)
				),
				/* testCaseName = */ "n2",
				/* testCaseDescription = */ "M1:age: Too Old"
			),
			Arguments.of(
				new Scenario1TestData(
					/* UserService C1 = */ UserServiceFactory(),
					/* S1M1 = */ new S1M1Parameters<>(
						/* String name = */ "Freddy May",
						/* String age = */ "eighteen",
						/* referencingMethodName = */ new String[2],
						/* expectedResult = */ new Result<>(
							/* assertType = */ AssertType.EXCEPTION,
							/* expectedException = */ Exception.class
						)
					)
				),
				/* testCaseName = */ "n3",
				/* testCaseDescription = */ "M1:age: Passed String"
			),
			Arguments.of(
				new Scenario1TestData(
					/* UserService C1 = */ UserServiceFactory(),
					/* S1M1 = */ new S1M1Parameters<>(
						/* String name = */ "FM",
						/* String age = */ "35",
						/* referencingMethodName = */ new String[2],
						/* expectedResult = */ new Result<>(
							/* assertType = */ AssertType.EXPECTED_VALUE,
							/* expectedReturnValue = */ false
						)
					)
				),
				/* testCaseName = */ "n4",
				/* testCaseDescription = */ "M1:name: invalid"
			)
		);
	}
//endregion

//region Types

//=========================================================================================================================
//Please modify this section only in the Modeleditor not here in the code, because otherwise it will cause merge conflicts!
//=========================================================================================================================
	static class Scenario1TestData {
	    public final UserService C1;
	    public final S1M1Parameters<Scenario1TestData> S1M1;
	    
	    public Scenario1TestData(UserService C1, S1M1Parameters<Scenario1TestData> S1M1) {
	    	this.C1 = C1;
	    	this.S1M1 = S1M1;
	    }
	}

	static class S1M1Parameters<TestData> {
		public final String methodName = "S1M1";
	    public final ObjectWrapper<String> name;
	    public final ObjectWrapper<String> age;
	    public final Result<TestData, UserService, Boolean> expectedResult;
		public S1M1Parameters(String name, String age, String[] referencingMethodName, Result<TestData, UserService, Boolean> expectedResult) {
			this.name = new ObjectWrapper<>(name, referencingMethodName[0]);
			this.age = new ObjectWrapper<>(age, referencingMethodName[1]);
	   		this.expectedResult = expectedResult;
	    }
	    
	    public ExceptionFunction<UserService, Boolean> call() {
	    	return i ->
	    	 i.validateUser(name.get(), age.get());
		}
	}
//endregion

//region Utility Classes

//=========================================================================================================================
//Please modify this section only in the Modeleditor not here in the code, because otherwise it will cause merge conflicts!
//=========================================================================================================================
	public static class ObjectWrapper<T> {
		public T object;
		public String referencingMethodName;
		
		public ObjectWrapper(T object, String referencingMethodName) {
			this.object = object;
			this.referencingMethodName = referencingMethodName;
		}
		
		public T get() {
			return ActualResultStorage.getOrDefault(referencingMethodName, object);
		}
	}
	
	public static class ActualResultStorage {
		private static Map<String, Object> actualResultMap = new HashMap<>();
		
		public static void setStorage() {
			actualResultMap = new HashMap<>();
		}
		
		public static <T> void put(String key, T value) {
			actualResultMap.put(key, value);
		}
		
		@SuppressWarnings("unchecked")
		public static <T> T getOrDefault(String key, T defaultValue) {
			return (T) actualResultMap.getOrDefault(key, defaultValue);
		}
	}
	
	static class Result<TestData, TInstance, TReturn> {
		public final AssertType assertType;
		public final TReturn expectedReturnValue;
		public final Class<? extends Throwable> expectedException;
		public final BiConsumer<TInstance, TReturn> customAction;
		public final List<SideEffect<TestData>> sideEffects;
		
		public Result(AssertType assertType) {
			this(assertType, (TReturn) null, null);
		}
	
		public Result(AssertType assertType, List<SideEffect<TestData>> sideEffects) {
			this(assertType, (TReturn) null, sideEffects);
		}
	
		public Result(AssertType assertType, TReturn expectedReturnValue) {
			this(assertType, expectedReturnValue, null);
		}
	
		public Result(AssertType assertType, Class<? extends Throwable> expectedException) {
			this(assertType, expectedException, null);
		}
	
		public Result(AssertType assertType, BiConsumer<TInstance, TReturn> customAction) {
			this(assertType, customAction, null);
		}
	
		public Result(AssertType assertType, TReturn expectedReturnValue, List<SideEffect<TestData>> sideEffects) {
			this(assertType, expectedReturnValue, null, null, sideEffects);
		}
	
		public Result(AssertType assertType, Class<? extends Throwable> expectedException, List<SideEffect<TestData>> sideEffects) {
			this(assertType, null, expectedException, null, sideEffects);
		}
	
		public Result(AssertType assertType, BiConsumer<TInstance, TReturn> customAction, List<SideEffect<TestData>> sideEffects) {
			this(assertType, null, null, customAction, sideEffects);
		}
	
		public Result(AssertType assertType, TReturn expectedReturnValue, Class<? extends Throwable> expectedException,
			BiConsumer<TInstance, TReturn> customAction, List<SideEffect<TestData>> sideEffects) {
			this.assertType = assertType;
			this.expectedReturnValue = expectedReturnValue;
			this.expectedException = expectedException;
			this.customAction = customAction;
			this.sideEffects = sideEffects;
		}
	}
	
	static class SideEffect<TestData> {
	    public final Object expectedValue;
	    public final Function<TestData, Object> actualValueAccessor;
	    
		public SideEffect(Object expectedValue, Function<TestData, Object> actualValueAccessor) {
			this.expectedValue = expectedValue;
			this.actualValueAccessor = actualValueAccessor;
		}
	}
	
	public enum AssertType {
	    EXCEPTION, EXPECTED_VALUE, CUSTOM_ASSERTION
	}
	
	static class VoidR {
	}
	
	private static <I> ExceptionFunction<I, VoidR> asFunc(ExceptionConsumer<I> action) {
		return i -> {
			action.accept(i);
			return null;
		};
	}
	
	@FunctionalInterface
	public interface ExceptionFunction<I, R> {
		R apply(I i) throws Exception;
	}
	
	@FunctionalInterface
	public interface ExceptionConsumer<I> {
		void accept(I i) throws Exception;
	}
	
	private <TestData, I, R> void assertion(TestData data, String methodName, I instance, Result<TestData, I, R> expectedResult, ExceptionFunction<I, R> toApply) {
		if (expectedResult == null) {
			ActualResultStorage.put(methodName, assertDoesNotThrow(() -> toApply.apply(instance)));
			return;
		}
		R actualResult = null;
		if (expectedResult.assertType.equals(AssertType.EXCEPTION)) {
			assertThrows(expectedResult.expectedException, () -> toApply.apply(instance));
		} else {
			actualResult = assertDoesNotThrow(() -> toApply.apply(instance));
			if (expectedResult.assertType.equals(AssertType.EXPECTED_VALUE) &&
					!(expectedResult.expectedReturnValue instanceof VoidR)) {
				assertEquals(expectedResult.expectedReturnValue, actualResult);
			} else if (expectedResult.assertType.equals(AssertType.CUSTOM_ASSERTION)) {
				expectedResult.customAction.accept(instance, actualResult);
			}
			if (expectedResult.sideEffects != null) {
				for (var sideEffect : expectedResult.sideEffects) {
					var sideEffectResult = sideEffect.actualValueAccessor.apply(data);
					assertEquals(sideEffect.expectedValue, sideEffectResult);
				}
			}
		}
		ActualResultStorage.put(methodName, actualResult);
	}
//endregion
}

/*
WARNING: Modification of this comment will make it impossible to merge user-defined changes

BEGIN_CODEGEN_DATA
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
END_CODEGEN_DATA
*/
