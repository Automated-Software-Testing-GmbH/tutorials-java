/*
* DO NOT MODIFY THIS COMMENT
* Generated by devmate
* Test model: 03535189-7634-4363-8120-228253d5cd6a
*/
package util.generics;

import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;
import java.util.stream.Stream;

import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;

@SuppressWarnings("unused")
public class GenericDemoTest {
	
//region Scenarios
	//A new scenario
	@ParameterizedTest(name = "{1} [{index}] {2}")
	@MethodSource({"Scenario1Source"})
	public void Scenario1Test(Scenario1TestData data, String TestName, String TestDescription) {
		ActualResultStorage.setStorage(); //saves the results of the called Methods
		
		assertion(data, data.S1M1.methodName, data.C1, data.S1M1.expectedResult, data.S1M1.call());
	}
//endregion

//region Data

//=========================================================================================================================
//Please modify this section only in the Modeleditor not here in the code, because otherwise it will cause merge conflicts!
//=========================================================================================================================
	//A new scenario
	private static Stream<Arguments> Scenario1Source() {
		return Stream.of(
			Arguments.of(
				new Scenario1TestData(
					/* GenericDemo C1 = */ new GenericDemo(),
					/* S1M1 = */ new S1M1Parameters<>(
						/* Integer g1 = */ 100,
						/* Integer g2 = */ 100,
						/* referencingMethodName = */ new String[2],
						/* expectedResult = */ new Result<>(
							/* assertType = */ AssertType.EXPECTED_VALUE,
							/* expectedReturnValue = */ true
						)
					)
				),
				/* testCaseName = */ "p1",
				/* testCaseDescription = */ ""
			),
			Arguments.of(
				new Scenario1TestData(
					/* GenericDemo C1 = */ new GenericDemo(),
					/* S1M1 = */ new S1M1Parameters<>(
						/* Integer g1 = */ 100,
						/* Integer g2 = */ 101,
						/* referencingMethodName = */ new String[2],
						/* expectedResult = */ new Result<>(
							/* assertType = */ AssertType.EXPECTED_VALUE,
							/* expectedReturnValue = */ false
						)
					)
				),
				/* testCaseName = */ "n1",
				/* testCaseDescription = */ "M1:g2: invalid"
			)
		);
	}
//endregion

//region Types

//=========================================================================================================================
//Please modify this section only in the Modeleditor not here in the code, because otherwise it will cause merge conflicts!
//=========================================================================================================================
	static class Scenario1TestData {
	    public final GenericDemo C1;
	    public final S1M1Parameters<Scenario1TestData> S1M1;
	    
	    public Scenario1TestData(GenericDemo C1, S1M1Parameters<Scenario1TestData> S1M1) {
	    	this.C1 = C1;
	    	this.S1M1 = S1M1;
	    }
	}

	static class S1M1Parameters<TestData> {
		public final String methodName = "S1M1";
	    public final ObjectWrapper<Integer> g1;
	    public final ObjectWrapper<Integer> g2;
	    public final Result<TestData, GenericDemo, Boolean> expectedResult;
		public S1M1Parameters(Integer g1, Integer g2, String[] referencingMethodName, Result<TestData, GenericDemo, Boolean> expectedResult) {
			this.g1 = new ObjectWrapper<>(g1, referencingMethodName[0]);
			this.g2 = new ObjectWrapper<>(g2, referencingMethodName[1]);
	   		this.expectedResult = expectedResult;
	    }
	    
	    public ExceptionFunction<GenericDemo, Boolean> call() {
	    	return i ->
	    	 i.isEqual(g1.get(), g2.get());
		}
	}
//endregion

//region Utility Classes

//=========================================================================================================================
//Please modify this section only in the Modeleditor not here in the code, because otherwise it will cause merge conflicts!
//=========================================================================================================================
	public static class ObjectWrapper<T> {
		public T object;
		public String referencingMethodName;
		
		public ObjectWrapper(T object, String referencingMethodName) {
			this.object = object;
			this.referencingMethodName = referencingMethodName;
		}
		
		public T get() {
			return ActualResultStorage.getOrDefault(referencingMethodName, object);
		}
	}
	
	public static class ActualResultStorage {
		private static Map<String, Object> actualResultMap = new HashMap<>();
		
		public static void setStorage() {
			actualResultMap = new HashMap<>();
		}
		
		public static <T> void put(String key, T value) {
			actualResultMap.put(key, value);
		}
		
		@SuppressWarnings("unchecked")
		public static <T> T getOrDefault(String key, T defaultValue) {
			return (T) actualResultMap.getOrDefault(key, defaultValue);
		}
	}
	
	static class Result<TestData, TInstance, TReturn> {
		public final AssertType assertType;
		public final TReturn expectedReturnValue;
		public final Class<? extends Throwable> expectedException;
		public final BiConsumer<TInstance, TReturn> customAction;
		public final List<SideEffect<TestData>> sideEffects;
		
		public Result(AssertType assertType) {
			this(assertType, (TReturn) null, null);
		}
	
		public Result(AssertType assertType, List<SideEffect<TestData>> sideEffects) {
			this(assertType, (TReturn) null, sideEffects);
		}
	
		public Result(AssertType assertType, TReturn expectedReturnValue) {
			this(assertType, expectedReturnValue, null);
		}
	
		public Result(AssertType assertType, Class<? extends Throwable> expectedException) {
			this(assertType, expectedException, null);
		}
	
		public Result(AssertType assertType, BiConsumer<TInstance, TReturn> customAction) {
			this(assertType, customAction, null);
		}
	
		public Result(AssertType assertType, TReturn expectedReturnValue, List<SideEffect<TestData>> sideEffects) {
			this(assertType, expectedReturnValue, null, null, sideEffects);
		}
	
		public Result(AssertType assertType, Class<? extends Throwable> expectedException, List<SideEffect<TestData>> sideEffects) {
			this(assertType, null, expectedException, null, sideEffects);
		}
	
		public Result(AssertType assertType, BiConsumer<TInstance, TReturn> customAction, List<SideEffect<TestData>> sideEffects) {
			this(assertType, null, null, customAction, sideEffects);
		}
	
		public Result(AssertType assertType, TReturn expectedReturnValue, Class<? extends Throwable> expectedException,
			BiConsumer<TInstance, TReturn> customAction, List<SideEffect<TestData>> sideEffects) {
			this.assertType = assertType;
			this.expectedReturnValue = expectedReturnValue;
			this.expectedException = expectedException;
			this.customAction = customAction;
			this.sideEffects = sideEffects;
		}
	}
	
	static class SideEffect<TestData> {
	    public final Object expectedValue;
	    public final Function<TestData, Object> actualValueAccessor;
	    
		public SideEffect(Object expectedValue, Function<TestData, Object> actualValueAccessor) {
			this.expectedValue = expectedValue;
			this.actualValueAccessor = actualValueAccessor;
		}
	}
	
	public enum AssertType {
	    EXCEPTION, EXPECTED_VALUE, CUSTOM_ASSERTION
	}
	
	static class VoidR {
	}
	
	private static <I> ExceptionFunction<I, VoidR> asFunc(ExceptionConsumer<I> action) {
		return i -> {
			action.accept(i);
			return null;
		};
	}
	
	@FunctionalInterface
	public interface ExceptionFunction<I, R> {
		R apply(I i) throws Exception;
	}
	
	@FunctionalInterface
	public interface ExceptionConsumer<I> {
		void accept(I i) throws Exception;
	}
	
	private <TestData, I, R> void assertion(TestData data, String methodName, I instance, Result<TestData, I, R> expectedResult, ExceptionFunction<I, R> toApply) {
		if (expectedResult == null) {
			ActualResultStorage.put(methodName, assertDoesNotThrow(() -> toApply.apply(instance)));
			return;
		}
		R actualResult = null;
		if (expectedResult.assertType.equals(AssertType.EXCEPTION)) {
			assertThrows(expectedResult.expectedException, () -> toApply.apply(instance));
		} else {
			actualResult = assertDoesNotThrow(() -> toApply.apply(instance));
			if (expectedResult.assertType.equals(AssertType.EXPECTED_VALUE) &&
					!(expectedResult.expectedReturnValue instanceof VoidR)) {
				assertEquals(expectedResult.expectedReturnValue, actualResult);
			} else if (expectedResult.assertType.equals(AssertType.CUSTOM_ASSERTION)) {
				expectedResult.customAction.accept(instance, actualResult);
			}
			if (expectedResult.sideEffects != null) {
				for (var sideEffect : expectedResult.sideEffects) {
					var sideEffectResult = sideEffect.actualValueAccessor.apply(data);
					assertEquals(sideEffect.expectedValue, sideEffectResult);
				}
			}
		}
		ActualResultStorage.put(methodName, actualResult);
	}
//endregion
}

/*
WARNING: Modification of this comment will make it impossible to merge user-defined changes

BEGIN_CODEGEN_DATA
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
END_CODEGEN_DATA
*/
