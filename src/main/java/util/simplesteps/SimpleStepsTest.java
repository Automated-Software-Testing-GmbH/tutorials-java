/*
* DO NOT MODIFY THIS COMMENT
* Generated by devmate
* Test model: 95fdbe2b-39d4-44b8-a00a-5845a650c8ca
*/
package util.simplesteps;

import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;
import java.util.stream.Stream;

import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;

@SuppressWarnings("unused")
public class SimpleStepsTest {
	
//region Factories
	private static SimpleSteps SimpleStepsInit(Integer initialSteps) {
		// TODO implement factory
		throw new UnsupportedOperationException();
	}
//endregion

//region Scenarios
	//A new scenario
	@ParameterizedTest(name = "{1} [{index}] {2}")
	@MethodSource({"Scenario1Source"})
	public void Scenario1Test(Scenario1TestData data, String TestName, String TestDescription) {
		ActualResultStorage.setStorage(); //saves the results of the called Methods
		
		assertion(data, data.S1M1.methodName, data.C1, data.S1M1.expectedResult, data.S1M1.call());
	}
//endregion

//region Data

//=========================================================================================================================
//Please modify this section only in the Modeleditor not here in the code, because otherwise it will cause merge conflicts!
//=========================================================================================================================
	//A new scenario
	private static Stream<Arguments> Scenario1Source() {
		return Stream.of(
			Arguments.of(
				new Scenario1TestData(
					/* SimpleSteps C1 = */ SimpleStepsInit(100),
					/* S1M1 = */ new S1M1Parameters<>(
						/* Integer steps = */ 10,
						/* referencingMethodName = */ "",
						/* expectedResult = */ new Result<>(
							/* assertType = */ AssertType.EXPECTED_VALUE
						)
					)
				),
				/* testCaseName = */ "p1",
				/* testCaseDescription = */ ""
			)
		);
	}
//endregion

//region Types

//=========================================================================================================================
//Please modify this section only in the Modeleditor not here in the code, because otherwise it will cause merge conflicts!
//=========================================================================================================================
	static class Scenario1TestData {
	    public final SimpleSteps C1;
	    public final S1M1Parameters<Scenario1TestData> S1M1;
	    
	    public Scenario1TestData(SimpleSteps C1, S1M1Parameters<Scenario1TestData> S1M1) {
	    	this.C1 = C1;
	    	this.S1M1 = S1M1;
	    }
	}

	static class S1M1Parameters<TestData> {
		public final String methodName = "S1M1";
	    public final ObjectWrapper<Integer> steps;
	    public final Result<TestData, SimpleSteps, VoidR> expectedResult;
		public S1M1Parameters(Integer steps, String referencingMethodName, Result<TestData, SimpleSteps, VoidR> expectedResult) {
			this.steps = new ObjectWrapper<>(steps, referencingMethodName);
	   		this.expectedResult = expectedResult;
	    }
	    
	    public ExceptionFunction<SimpleSteps, VoidR> call() {
	    	return asFunc(i ->
	    	 i.addSteps(steps.get()));
		}
	}
//endregion

//region Utility Classes

//=========================================================================================================================
//Please modify this section only in the Modeleditor not here in the code, because otherwise it will cause merge conflicts!
//=========================================================================================================================
	public static class ObjectWrapper<T> {
		public T object;
		public String referencingMethodName;
		
		public ObjectWrapper(T object, String referencingMethodName) {
			this.object = object;
			this.referencingMethodName = referencingMethodName;
		}
		
		public T get() {
			return ActualResultStorage.getOrDefault(referencingMethodName, object);
		}
	}
	
	public static class ActualResultStorage {
		private static Map<String, Object> actualResultMap = new HashMap<>();
		
		public static void setStorage() {
			actualResultMap = new HashMap<>();
		}
		
		public static <T> void put(String key, T value) {
			actualResultMap.put(key, value);
		}
		
		@SuppressWarnings("unchecked")
		public static <T> T getOrDefault(String key, T defaultValue) {
			return (T) actualResultMap.getOrDefault(key, defaultValue);
		}
	}
	
	static class Result<TestData, TInstance, TReturn> {
		public final AssertType assertType;
		public final TReturn expectedReturnValue;
		public final Class<? extends Throwable> expectedException;
		public final BiConsumer<TInstance, TReturn> customAction;
		public final List<SideEffect<TestData>> sideEffects;
		
		public Result(AssertType assertType) {
			this(assertType, (TReturn) null, null);
		}
	
		public Result(AssertType assertType, List<SideEffect<TestData>> sideEffects) {
			this(assertType, (TReturn) null, sideEffects);
		}
	
		public Result(AssertType assertType, TReturn expectedReturnValue) {
			this(assertType, expectedReturnValue, null);
		}
	
		public Result(AssertType assertType, Class<? extends Throwable> expectedException) {
			this(assertType, expectedException, null);
		}
	
		public Result(AssertType assertType, BiConsumer<TInstance, TReturn> customAction) {
			this(assertType, customAction, null);
		}
	
		public Result(AssertType assertType, TReturn expectedReturnValue, List<SideEffect<TestData>> sideEffects) {
			this(assertType, expectedReturnValue, null, null, sideEffects);
		}
	
		public Result(AssertType assertType, Class<? extends Throwable> expectedException, List<SideEffect<TestData>> sideEffects) {
			this(assertType, null, expectedException, null, sideEffects);
		}
	
		public Result(AssertType assertType, BiConsumer<TInstance, TReturn> customAction, List<SideEffect<TestData>> sideEffects) {
			this(assertType, null, null, customAction, sideEffects);
		}
	
		public Result(AssertType assertType, TReturn expectedReturnValue, Class<? extends Throwable> expectedException,
			BiConsumer<TInstance, TReturn> customAction, List<SideEffect<TestData>> sideEffects) {
			this.assertType = assertType;
			this.expectedReturnValue = expectedReturnValue;
			this.expectedException = expectedException;
			this.customAction = customAction;
			this.sideEffects = sideEffects;
		}
	}
	
	static class SideEffect<TestData> {
	    public final Object expectedValue;
	    public final Function<TestData, Object> actualValueAccessor;
	    
		public SideEffect(Object expectedValue, Function<TestData, Object> actualValueAccessor) {
			this.expectedValue = expectedValue;
			this.actualValueAccessor = actualValueAccessor;
		}
	}
	
	public enum AssertType {
	    EXCEPTION, EXPECTED_VALUE, CUSTOM_ASSERTION
	}
	
	static class VoidR {
	}
	
	private static <I> ExceptionFunction<I, VoidR> asFunc(ExceptionConsumer<I> action) {
		return i -> {
			action.accept(i);
			return null;
		};
	}
	
	@FunctionalInterface
	public interface ExceptionFunction<I, R> {
		R apply(I i) throws Exception;
	}
	
	@FunctionalInterface
	public interface ExceptionConsumer<I> {
		void accept(I i) throws Exception;
	}
	
	private <TestData, I, R> void assertion(TestData data, String methodName, I instance, Result<TestData, I, R> expectedResult, ExceptionFunction<I, R> toApply) {
		if (expectedResult == null) {
			ActualResultStorage.put(methodName, assertDoesNotThrow(() -> toApply.apply(instance)));
			return;
		}
		R actualResult = null;
		if (expectedResult.assertType.equals(AssertType.EXCEPTION)) {
			assertThrows(expectedResult.expectedException, () -> toApply.apply(instance));
		} else {
			actualResult = assertDoesNotThrow(() -> toApply.apply(instance));
			if (expectedResult.assertType.equals(AssertType.EXPECTED_VALUE) &&
					!(expectedResult.expectedReturnValue instanceof VoidR)) {
				assertEquals(expectedResult.expectedReturnValue, actualResult);
			} else if (expectedResult.assertType.equals(AssertType.CUSTOM_ASSERTION)) {
				expectedResult.customAction.accept(instance, actualResult);
			}
			if (expectedResult.sideEffects != null) {
				for (var sideEffect : expectedResult.sideEffects) {
					var sideEffectResult = sideEffect.actualValueAccessor.apply(data);
					assertEquals(sideEffect.expectedValue, sideEffectResult);
				}
			}
		}
		ActualResultStorage.put(methodName, actualResult);
	}
//endregion
}

/*
WARNING: Modification of this comment will make it impossible to merge user-defined changes

BEGIN_CODEGEN_DATA
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
END_CODEGEN_DATA
*/
