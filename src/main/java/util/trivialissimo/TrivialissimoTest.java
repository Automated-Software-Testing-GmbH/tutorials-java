/*
* DO NOT MODIFY THIS COMMENT
* Generated by devmate
* Test model: 251fdbc7-28d5-408c-a57c-b1a74fa4f86a
*/
package util.trivialissimo;

import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;
import java.util.stream.Stream;

import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;

@SuppressWarnings("unused")
public class TrivialissimoTest {
	
//region Scenarios
	//A new scenario
	@ParameterizedTest(name = "{1} [{index}] {2}")
	@MethodSource({"Scenario1Source"})
	public void Scenario1Test(Scenario1TestData data, String TestName, String TestDescription) {
		ActualResultStorage.setStorage(); //saves the results of the called Methods
		
		assertion(data, data.S1M1.methodName, null, data.S1M1.expectedResult, data.S1M1.call());
	}
//endregion

//region Data

//=========================================================================================================================
//Please modify this section only in the Modeleditor not here in the code, because otherwise it will cause merge conflicts!
//=========================================================================================================================
	//A new scenario
	private static Stream<Arguments> Scenario1Source() {
		return Stream.of(
			Arguments.of(
				new Scenario1TestData(
					/* S1M1 = */ new S1M1Parameters<>(
						/* String value = */ "10",
						/* referencingMethodName = */ "",
						/* expectedResult = */ new Result<>(
							/* assertType = */ AssertType.EXPECTED_VALUE,
							/* expectedReturnValue = */ 10
						)
					)
				),
				/* testCaseName = */ "p1",
				/* testCaseDescription = */ ""
			),
			Arguments.of(
				new Scenario1TestData(
					/* S1M1 = */ new S1M1Parameters<>(
						/* String value = */ "0",
						/* referencingMethodName = */ "",
						/* expectedResult = */ new Result<>(
							/* assertType = */ AssertType.EXCEPTION,
							/* expectedException = */ Exception.class
						)
					)
				),
				/* testCaseName = */ "n1",
				/* testCaseDescription = */ "M1:value: boundaries"
			),
			Arguments.of(
				new Scenario1TestData(
					/* S1M1 = */ new S1M1Parameters<>(
						/* String value = */ "ten",
						/* referencingMethodName = */ "",
						/* expectedResult = */ new Result<>(
							/* assertType = */ AssertType.EXCEPTION,
							/* expectedException = */ Exception.class
						)
					)
				),
				/* testCaseName = */ "n2",
				/* testCaseDescription = */ "M1:value: invalid"
			),
			Arguments.of(
				new Scenario1TestData(
					/* S1M1 = */ new S1M1Parameters<>(
						/* String value = */ "10.1",
						/* referencingMethodName = */ "",
						/* expectedResult = */ new Result<>(
							/* assertType = */ AssertType.EXCEPTION,
							/* expectedException = */ Exception.class
						)
					)
				),
				/* testCaseName = */ "n3",
				/* testCaseDescription = */ "M1:value: invalid"
			)
		);
	}
//endregion

//region Types

//=========================================================================================================================
//Please modify this section only in the Modeleditor not here in the code, because otherwise it will cause merge conflicts!
//=========================================================================================================================
	static class Scenario1TestData {
	    public final S1M1Parameters<Scenario1TestData> S1M1;
	    
	    public Scenario1TestData(S1M1Parameters<Scenario1TestData> S1M1) {
	    	this.S1M1 = S1M1;
	    }
	}

	static class S1M1Parameters<TestData> {
		public final String methodName = "S1M1";
	    public final ObjectWrapper<String> value;
	    public final Result<TestData, Object, Integer> expectedResult;
		public S1M1Parameters(String value, String referencingMethodName, Result<TestData, Object, Integer> expectedResult) {
			this.value = new ObjectWrapper<>(value, referencingMethodName);
	   		this.expectedResult = expectedResult;
	    }
	    
	    public ExceptionFunction<Object, Integer> call() {
	    	return i ->
	    	 util.trivialissimo.Trivialissimo.parsePositiveIntString(value.get());
		}
	}
//endregion

//region Utility Classes

//=========================================================================================================================
//Please modify this section only in the Modeleditor not here in the code, because otherwise it will cause merge conflicts!
//=========================================================================================================================
	public static class ObjectWrapper<T> {
		public T object;
		public String referencingMethodName;
		
		public ObjectWrapper(T object, String referencingMethodName) {
			this.object = object;
			this.referencingMethodName = referencingMethodName;
		}
		
		public T get() {
			return ActualResultStorage.getOrDefault(referencingMethodName, object);
		}
	}
	
	public static class ActualResultStorage {
		private static Map<String, Object> actualResultMap = new HashMap<>();
		
		public static void setStorage() {
			actualResultMap = new HashMap<>();
		}
		
		public static <T> void put(String key, T value) {
			actualResultMap.put(key, value);
		}
		
		@SuppressWarnings("unchecked")
		public static <T> T getOrDefault(String key, T defaultValue) {
			return (T) actualResultMap.getOrDefault(key, defaultValue);
		}
	}
	
	static class Result<TestData, TInstance, TReturn> {
		public final AssertType assertType;
		public final TReturn expectedReturnValue;
		public final Class<? extends Throwable> expectedException;
		public final BiConsumer<TInstance, TReturn> customAction;
		public final List<SideEffect<TestData>> sideEffects;
		
		public Result(AssertType assertType) {
			this(assertType, (TReturn) null, null);
		}
	
		public Result(AssertType assertType, List<SideEffect<TestData>> sideEffects) {
			this(assertType, (TReturn) null, sideEffects);
		}
	
		public Result(AssertType assertType, TReturn expectedReturnValue) {
			this(assertType, expectedReturnValue, null);
		}
	
		public Result(AssertType assertType, Class<? extends Throwable> expectedException) {
			this(assertType, expectedException, null);
		}
	
		public Result(AssertType assertType, BiConsumer<TInstance, TReturn> customAction) {
			this(assertType, customAction, null);
		}
	
		public Result(AssertType assertType, TReturn expectedReturnValue, List<SideEffect<TestData>> sideEffects) {
			this(assertType, expectedReturnValue, null, null, sideEffects);
		}
	
		public Result(AssertType assertType, Class<? extends Throwable> expectedException, List<SideEffect<TestData>> sideEffects) {
			this(assertType, null, expectedException, null, sideEffects);
		}
	
		public Result(AssertType assertType, BiConsumer<TInstance, TReturn> customAction, List<SideEffect<TestData>> sideEffects) {
			this(assertType, null, null, customAction, sideEffects);
		}
	
		public Result(AssertType assertType, TReturn expectedReturnValue, Class<? extends Throwable> expectedException,
			BiConsumer<TInstance, TReturn> customAction, List<SideEffect<TestData>> sideEffects) {
			this.assertType = assertType;
			this.expectedReturnValue = expectedReturnValue;
			this.expectedException = expectedException;
			this.customAction = customAction;
			this.sideEffects = sideEffects;
		}
	}
	
	static class SideEffect<TestData> {
	    public final Object expectedValue;
	    public final Function<TestData, Object> actualValueAccessor;
	    
		public SideEffect(Object expectedValue, Function<TestData, Object> actualValueAccessor) {
			this.expectedValue = expectedValue;
			this.actualValueAccessor = actualValueAccessor;
		}
	}
	
	public enum AssertType {
	    EXCEPTION, EXPECTED_VALUE, CUSTOM_ASSERTION
	}
	
	static class VoidR {
	}
	
	private static <I> ExceptionFunction<I, VoidR> asFunc(ExceptionConsumer<I> action) {
		return i -> {
			action.accept(i);
			return null;
		};
	}
	
	@FunctionalInterface
	public interface ExceptionFunction<I, R> {
		R apply(I i) throws Exception;
	}
	
	@FunctionalInterface
	public interface ExceptionConsumer<I> {
		void accept(I i) throws Exception;
	}
	
	private <TestData, I, R> void assertion(TestData data, String methodName, I instance, Result<TestData, I, R> expectedResult, ExceptionFunction<I, R> toApply) {
		if (expectedResult == null) {
			ActualResultStorage.put(methodName, assertDoesNotThrow(() -> toApply.apply(instance)));
			return;
		}
		R actualResult = null;
		if (expectedResult.assertType.equals(AssertType.EXCEPTION)) {
			assertThrows(expectedResult.expectedException, () -> toApply.apply(instance));
		} else {
			actualResult = assertDoesNotThrow(() -> toApply.apply(instance));
			if (expectedResult.assertType.equals(AssertType.EXPECTED_VALUE) &&
					!(expectedResult.expectedReturnValue instanceof VoidR)) {
				assertEquals(expectedResult.expectedReturnValue, actualResult);
			} else if (expectedResult.assertType.equals(AssertType.CUSTOM_ASSERTION)) {
				expectedResult.customAction.accept(instance, actualResult);
			}
			if (expectedResult.sideEffects != null) {
				for (var sideEffect : expectedResult.sideEffects) {
					var sideEffectResult = sideEffect.actualValueAccessor.apply(data);
					assertEquals(sideEffect.expectedValue, sideEffectResult);
				}
			}
		}
		ActualResultStorage.put(methodName, actualResult);
	}
//endregion
}

/*
WARNING: Modification of this comment will make it impossible to merge user-defined changes

BEGIN_CODEGEN_DATA
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
Sui69eonmPz5P4mKPkU5JgAA
END_CODEGEN_DATA
*/
