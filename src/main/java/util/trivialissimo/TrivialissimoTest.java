/*
* DO NOT MODIFY THIS COMMENT
* Generated by devmate
* Test model: cb42c2c0-1cd0-4762-b1eb-01dd0b77cb80
*/
package util.trivialissimo;

import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;
import java.util.stream.Stream;

import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;

@SuppressWarnings("unused")
public class TrivialissimoTest {
	
//region Scenarios
	//A new scenario
	@ParameterizedTest(name = "{1} [{index}] {2}")
	@MethodSource({"Scenario1Source"})
	public void Scenario1Test(Scenario1TestData data, String TestName, String TestDescription) {
		ActualResultStorage.setStorage(); //saves the results of the called Methods
		
		assertion(data, data.S1M1.methodName, null, data.S1M1.expectedResult, data.S1M1.call());
	}
//endregion

//region Data

//=========================================================================================================================
//Please modify this section only in the Modeleditor not here in the code, because otherwise it will cause merge conflicts!
//=========================================================================================================================
	//A new scenario
	private static Stream<Arguments> Scenario1Source() {
		return Stream.of(
			Arguments.of(
				new Scenario1TestData(
					/* S1M1 = */ new S1M1Parameters<>(
						/* String value = */ "10",
						/* referencingMethodName = */ "",
						/* expectedResult = */ new Result<>(
							/* assertType = */ AssertType.EXPECTED_VALUE,
							/* expectedReturnValue = */ 10
						)
					)
				),
				/* testCaseName = */ "p1",
				/* testCaseDescription = */ ""
			),
			Arguments.of(
				new Scenario1TestData(
					/* S1M1 = */ new S1M1Parameters<>(
						/* String value = */ "ten",
						/* referencingMethodName = */ "",
						/* expectedResult = */ new Result<>(
							/* assertType = */ AssertType.EXCEPTION,
							/* expectedException = */ Exception.class
						)
					)
				),
				/* testCaseName = */ "n1",
				/* testCaseDescription = */ "M1:value: invalid"
			),
			Arguments.of(
				new Scenario1TestData(
					/* S1M1 = */ new S1M1Parameters<>(
						/* String value = */ "10.1",
						/* referencingMethodName = */ "",
						/* expectedResult = */ new Result<>(
							/* assertType = */ AssertType.EXCEPTION,
							/* expectedException = */ Exception.class
						)
					)
				),
				/* testCaseName = */ "n2",
				/* testCaseDescription = */ "M1:value: invalid"
			),
			Arguments.of(
				new Scenario1TestData(
					/* S1M1 = */ new S1M1Parameters<>(
						/* String value = */ "0",
						/* referencingMethodName = */ "",
						/* expectedResult = */ new Result<>(
							/* assertType = */ AssertType.EXCEPTION,
							/* expectedException = */ Exception.class
						)
					)
				),
				/* testCaseName = */ "n3",
				/* testCaseDescription = */ "M1:value: invalid"
			)
		);
	}
//endregion

//region Types

//=========================================================================================================================
//Please modify this section only in the Modeleditor not here in the code, because otherwise it will cause merge conflicts!
//=========================================================================================================================
	static class Scenario1TestData {
	    public final S1M1Parameters<Scenario1TestData> S1M1;
	    
	    public Scenario1TestData(S1M1Parameters<Scenario1TestData> S1M1) {
	    	this.S1M1 = S1M1;
	    }
	}

	static class S1M1Parameters<TestData> {
		public final String methodName = "S1M1";
	    public final ObjectWrapper<String> value;
	    public final Result<TestData, Object, Integer> expectedResult;
		public S1M1Parameters(String value, String referencingMethodName, Result<TestData, Object, Integer> expectedResult) {
			this.value = new ObjectWrapper<>(value, referencingMethodName);
	   		this.expectedResult = expectedResult;
	    }
	    
	    public ExceptionFunction<Object, Integer> call() {
	    	return i ->
	    	 util.trivialissimo.Trivialissimo.parsePositiveIntString(value.get());
		}
	}
//endregion

//region Utility Classes

//=========================================================================================================================
//Please modify this section only in the Modeleditor not here in the code, because otherwise it will cause merge conflicts!
//=========================================================================================================================
	public static class ObjectWrapper<T> {
		public T object;
		public String referencingMethodName;
		
		public ObjectWrapper(T object, String referencingMethodName) {
			this.object = object;
			this.referencingMethodName = referencingMethodName;
		}
		
		public T get() {
			return ActualResultStorage.getOrDefault(referencingMethodName, object);
		}
	}
	
	public static class ActualResultStorage {
		private static Map<String, Object> actualResultMap = new HashMap<>();
		
		public static void setStorage() {
			actualResultMap = new HashMap<>();
		}
		
		public static <T> void put(String key, T value) {
			actualResultMap.put(key, value);
		}
		
		@SuppressWarnings("unchecked")
		public static <T> T getOrDefault(String key, T defaultValue) {
			return (T) actualResultMap.getOrDefault(key, defaultValue);
		}
	}
	
	static class Result<TestData, TInstance, TReturn> {
		public final AssertType assertType;
		public final TReturn expectedReturnValue;
		public final Class<? extends Throwable> expectedException;
		public final BiConsumer<TInstance, TReturn> customAction;
		public final List<SideEffect<TestData>> sideEffects;
		
		public Result(AssertType assertType) {
			this(assertType, (TReturn) null, null);
		}
	
		public Result(AssertType assertType, List<SideEffect<TestData>> sideEffects) {
			this(assertType, (TReturn) null, sideEffects);
		}
	
		public Result(AssertType assertType, TReturn expectedReturnValue) {
			this(assertType, expectedReturnValue, null);
		}
	
		public Result(AssertType assertType, Class<? extends Throwable> expectedException) {
			this(assertType, expectedException, null);
		}
	
		public Result(AssertType assertType, BiConsumer<TInstance, TReturn> customAction) {
			this(assertType, customAction, null);
		}
	
		public Result(AssertType assertType, TReturn expectedReturnValue, List<SideEffect<TestData>> sideEffects) {
			this(assertType, expectedReturnValue, null, null, sideEffects);
		}
	
		public Result(AssertType assertType, Class<? extends Throwable> expectedException, List<SideEffect<TestData>> sideEffects) {
			this(assertType, null, expectedException, null, sideEffects);
		}
	
		public Result(AssertType assertType, BiConsumer<TInstance, TReturn> customAction, List<SideEffect<TestData>> sideEffects) {
			this(assertType, null, null, customAction, sideEffects);
		}
	
		public Result(AssertType assertType, TReturn expectedReturnValue, Class<? extends Throwable> expectedException,
			BiConsumer<TInstance, TReturn> customAction, List<SideEffect<TestData>> sideEffects) {
			this.assertType = assertType;
			this.expectedReturnValue = expectedReturnValue;
			this.expectedException = expectedException;
			this.customAction = customAction;
			this.sideEffects = sideEffects;
		}
	}
	
	static class SideEffect<TestData> {
	    public final Object expectedValue;
	    public final Function<TestData, Object> actualValueAccessor;
	    
		public SideEffect(Object expectedValue, Function<TestData, Object> actualValueAccessor) {
			this.expectedValue = expectedValue;
			this.actualValueAccessor = actualValueAccessor;
		}
	}
	
	public enum AssertType {
	    EXCEPTION, EXPECTED_VALUE, CUSTOM_ASSERTION
	}
	
	static class VoidR {
	}
	
	private static <I> ExceptionFunction<I, VoidR> asFunc(ExceptionConsumer<I> action) {
		return i -> {
			action.accept(i);
			return null;
		};
	}
	
	@FunctionalInterface
	public interface ExceptionFunction<I, R> {
		R apply(I i) throws Exception;
	}
	
	@FunctionalInterface
	public interface ExceptionConsumer<I> {
		void accept(I i) throws Exception;
	}
	
	private <TestData, I, R> void assertion(TestData data, String methodName, I instance, Result<TestData, I, R> expectedResult, ExceptionFunction<I, R> toApply) {
		if (expectedResult == null) {
			ActualResultStorage.put(methodName, assertDoesNotThrow(() -> toApply.apply(instance)));
			return;
		}
		R actualResult = null;
		if (expectedResult.assertType.equals(AssertType.EXCEPTION)) {
			assertThrows(expectedResult.expectedException, () -> toApply.apply(instance));
		} else {
			actualResult = assertDoesNotThrow(() -> toApply.apply(instance));
			if (expectedResult.assertType.equals(AssertType.EXPECTED_VALUE) &&
					!(expectedResult.expectedReturnValue instanceof VoidR)) {
				assertEquals(expectedResult.expectedReturnValue, actualResult);
			} else if (expectedResult.assertType.equals(AssertType.CUSTOM_ASSERTION)) {
				expectedResult.customAction.accept(instance, actualResult);
			}
			if (expectedResult.sideEffects != null) {
				for (var sideEffect : expectedResult.sideEffects) {
					var sideEffectResult = sideEffect.actualValueAccessor.apply(data);
					assertEquals(sideEffect.expectedValue, sideEffectResult);
				}
			}
		}
		ActualResultStorage.put(methodName, actualResult);
	}
//endregion
}

/*
WARNING: Modification of this comment will make it impossible to merge user-defined changes

BEGIN_CODEGEN_DATA
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
MPnzv/zxJeE2JgAA
END_CODEGEN_DATA
*/
