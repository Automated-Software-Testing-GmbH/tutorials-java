/*
* DO NOT MODIFY THIS COMMENT
* Generated by devmate
* Test model: 90fcdbad-f045-4911-992c-9da9e9242437
*/
package util.sideeffects;

import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;
import java.util.stream.Stream;

import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;

@SuppressWarnings("unused")
public class SimpleStepsTest {
	
//region Scenarios
	//A new scenario
	@ParameterizedTest(name = "{1} [{index}] {2}")
	@MethodSource({"Scenario1Source"})
	public void Scenario1Test(Scenario1TestData data, String TestName, String TestDescription) {
		ActualResultStorage.setStorage(); //saves the results of the called Methods
		
		assertion(data, data.S1M1.methodName, data.C1, data.S1M1.expectedResult, data.S1M1.call());
	}
//endregion

//region Data

//=========================================================================================================================
//Please modify this section only in the Modeleditor not here in the code, because otherwise it will cause merge conflicts!
//=========================================================================================================================
	//A new scenario
	private static Stream<Arguments> Scenario1Source() {
		return Stream.of(
			Arguments.of(
				new Scenario1TestData(
					/* SimpleSteps C1 = */ new SimpleSteps(100),
					/* S1M1 = */ new S1M1Parameters<>(
						/* Integer steps = */ 10,
						/* referencingMethodName = */ "",
						/* expectedResult = */ new Result<>(
							/* assertType = */ AssertType.EXPECTED_VALUE,
							/* sideEffects = */ List.of(
								new SideEffect<>(
									/* expectedValue = */ new SimpleSteps(110),
									/* actualValueAccessor = */ t -> t.C1
								)
							)
						)
					)
				),
				/* testCaseName = */ "p1",
				/* testCaseDescription = */ ""
			)
		);
	}
//endregion

//region Types

//=========================================================================================================================
//Please modify this section only in the Modeleditor not here in the code, because otherwise it will cause merge conflicts!
//=========================================================================================================================
	static class Scenario1TestData {
	    public final SimpleSteps C1;
	    public final S1M1Parameters<Scenario1TestData> S1M1;
	    
	    public Scenario1TestData(SimpleSteps C1, S1M1Parameters<Scenario1TestData> S1M1) {
	    	this.C1 = C1;
	    	this.S1M1 = S1M1;
	    }
	}

	static class S1M1Parameters<TestData> {
		public final String methodName = "S1M1";
	    public final ObjectWrapper<Integer> steps;
	    public final Result<TestData, SimpleSteps, VoidR> expectedResult;
		public S1M1Parameters(Integer steps, String referencingMethodName, Result<TestData, SimpleSteps, VoidR> expectedResult) {
			this.steps = new ObjectWrapper<>(steps, referencingMethodName);
	   		this.expectedResult = expectedResult;
	    }
	    
	    public ExceptionFunction<SimpleSteps, VoidR> call() {
	    	return asFunc(i ->
	    	 i.addSteps(steps.get()));
		}
	}
//endregion

//region Utility Classes

//=========================================================================================================================
//Please modify this section only in the Modeleditor not here in the code, because otherwise it will cause merge conflicts!
//=========================================================================================================================
	public static class ObjectWrapper<T> {
		public T object;
		public String referencingMethodName;
		
		public ObjectWrapper(T object, String referencingMethodName) {
			this.object = object;
			this.referencingMethodName = referencingMethodName;
		}
		
		public T get() {
			return ActualResultStorage.getOrDefault(referencingMethodName, object);
		}
	}
	
	public static class ActualResultStorage {
		private static Map<String, Object> actualResultMap = new HashMap<>();
		
		public static void setStorage() {
			actualResultMap = new HashMap<>();
		}
		
		public static <T> void put(String key, T value) {
			actualResultMap.put(key, value);
		}
		
		@SuppressWarnings("unchecked")
		public static <T> T getOrDefault(String key, T defaultValue) {
			return (T) actualResultMap.getOrDefault(key, defaultValue);
		}
	}
	
	static class Result<TestData, TInstance, TReturn> {
		public final AssertType assertType;
		public final TReturn expectedReturnValue;
		public final Class<? extends Throwable> expectedException;
		public final BiConsumer<TInstance, TReturn> customAction;
		public final List<SideEffect<TestData>> sideEffects;
		
		public Result(AssertType assertType) {
			this(assertType, (TReturn) null, null);
		}
	
		public Result(AssertType assertType, List<SideEffect<TestData>> sideEffects) {
			this(assertType, (TReturn) null, sideEffects);
		}
	
		public Result(AssertType assertType, TReturn expectedReturnValue) {
			this(assertType, expectedReturnValue, null);
		}
	
		public Result(AssertType assertType, Class<? extends Throwable> expectedException) {
			this(assertType, expectedException, null);
		}
	
		public Result(AssertType assertType, BiConsumer<TInstance, TReturn> customAction) {
			this(assertType, customAction, null);
		}
	
		public Result(AssertType assertType, TReturn expectedReturnValue, List<SideEffect<TestData>> sideEffects) {
			this(assertType, expectedReturnValue, null, null, sideEffects);
		}
	
		public Result(AssertType assertType, Class<? extends Throwable> expectedException, List<SideEffect<TestData>> sideEffects) {
			this(assertType, null, expectedException, null, sideEffects);
		}
	
		public Result(AssertType assertType, BiConsumer<TInstance, TReturn> customAction, List<SideEffect<TestData>> sideEffects) {
			this(assertType, null, null, customAction, sideEffects);
		}
	
		public Result(AssertType assertType, TReturn expectedReturnValue, Class<? extends Throwable> expectedException,
			BiConsumer<TInstance, TReturn> customAction, List<SideEffect<TestData>> sideEffects) {
			this.assertType = assertType;
			this.expectedReturnValue = expectedReturnValue;
			this.expectedException = expectedException;
			this.customAction = customAction;
			this.sideEffects = sideEffects;
		}
	}
	
	static class SideEffect<TestData> {
	    public final Object expectedValue;
	    public final Function<TestData, Object> actualValueAccessor;
	    
		public SideEffect(Object expectedValue, Function<TestData, Object> actualValueAccessor) {
			this.expectedValue = expectedValue;
			this.actualValueAccessor = actualValueAccessor;
		}
	}
	
	public enum AssertType {
	    EXCEPTION, EXPECTED_VALUE, CUSTOM_ASSERTION
	}
	
	static class VoidR {
	}
	
	private static <I> ExceptionFunction<I, VoidR> asFunc(ExceptionConsumer<I> action) {
		return i -> {
			action.accept(i);
			return null;
		};
	}
	
	@FunctionalInterface
	public interface ExceptionFunction<I, R> {
		R apply(I i) throws Exception;
	}
	
	@FunctionalInterface
	public interface ExceptionConsumer<I> {
		void accept(I i) throws Exception;
	}
	
	private <TestData, I, R> void assertion(TestData data, String methodName, I instance, Result<TestData, I, R> expectedResult, ExceptionFunction<I, R> toApply) {
		if (expectedResult == null) {
			ActualResultStorage.put(methodName, assertDoesNotThrow(() -> toApply.apply(instance)));
			return;
		}
		R actualResult = null;
		if (expectedResult.assertType.equals(AssertType.EXCEPTION)) {
			assertThrows(expectedResult.expectedException, () -> toApply.apply(instance));
		} else {
			actualResult = assertDoesNotThrow(() -> toApply.apply(instance));
			if (expectedResult.assertType.equals(AssertType.EXPECTED_VALUE) &&
					!(expectedResult.expectedReturnValue instanceof VoidR)) {
				assertEquals(expectedResult.expectedReturnValue, actualResult);
			} else if (expectedResult.assertType.equals(AssertType.CUSTOM_ASSERTION)) {
				expectedResult.customAction.accept(instance, actualResult);
			}
			if (expectedResult.sideEffects != null) {
				for (var sideEffect : expectedResult.sideEffects) {
					var sideEffectResult = sideEffect.actualValueAccessor.apply(data);
					assertEquals(sideEffect.expectedValue, sideEffectResult);
				}
			}
		}
		ActualResultStorage.put(methodName, actualResult);
	}
//endregion
}

/*
WARNING: Modification of this comment will make it impossible to merge user-defined changes

BEGIN_CODEGEN_DATA
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
uqm95gkmPP8P2IkEKDUiAAA=
END_CODEGEN_DATA
*/
