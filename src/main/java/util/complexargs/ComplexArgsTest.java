/*
* DO NOT MODIFY THIS COMMENT
* Generated by devmate
* Test model: 28aadf27-bf02-4f71-8ec9-d4691a16f401
*/
package util.complexargs;

import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;
import java.util.stream.Stream;

import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;

import models.User;

@SuppressWarnings("unused")
public class ComplexArgsTest {
	
//region Custom Assertions
	private static void assertCheckBioNoParm(User result, CustomMatcherCheckBioNoParmTestData data) {
		assertEquals("No bio available", result.getBio());
	}
		
	private static void assertCheckBio(User result, CustomMatcherCheckBioTestData data) {
		assertEquals(data.expectedCustomMatcher, result.getBio());
	}
//endregion

//region Scenarios
	//A new scenario
	@ParameterizedTest(name = "{1} [{index}] {2}")
	@MethodSource({"Scenario1Source"})
	public void Scenario1Test(Scenario1TestData data, String TestName, String TestDescription) {
		ActualResultStorage.setStorage(); //saves the results of the called Methods
		
		assertion(data, data.S1M1.methodName, null, data.S1M1.expectedResult, data.S1M1.call());
	}
//endregion

//region Data

//=========================================================================================================================
//Please modify this section only in the Modeleditor not here in the code, because otherwise it will cause merge conflicts!
//=========================================================================================================================
	//A new scenario
	private static Stream<Arguments> Scenario1Source() {
		return Stream.of(
			Arguments.of(
				new Scenario1TestData(
					/* S1M1 = */ new S1M1Parameters<>(
						/* User user = */ new User("John Brook", 45),
						/* referencingMethodName = */ "",
						/* expectedResult = */ new Result<>(
							/* assertType = */ AssertType.CUSTOM_ASSERTION,
							/* customAction = */ (i, r) -> assertCheckBioNoParm(r, 
								new CustomMatcherCheckBioNoParmTestData(
								)
							)
						)
					)
				),
				/* testCaseName = */ "p1",
				/* testCaseDescription = */ ""
			)
		);
	}
//endregion

//region Types

//=========================================================================================================================
//Please modify this section only in the Modeleditor not here in the code, because otherwise it will cause merge conflicts!
//=========================================================================================================================
	static class Scenario1TestData {
	    public final S1M1Parameters<Scenario1TestData> S1M1;
	    
	    public Scenario1TestData(S1M1Parameters<Scenario1TestData> S1M1) {
	    	this.S1M1 = S1M1;
	    }
	}

	static class S1M1Parameters<TestData> {
		public final String methodName = "S1M1";
	    public final ObjectWrapper<User> user;
	    public final Result<TestData, Object, User> expectedResult;
		public S1M1Parameters(User user, String referencingMethodName, Result<TestData, Object, User> expectedResult) {
			this.user = new ObjectWrapper<>(user, referencingMethodName);
	   		this.expectedResult = expectedResult;
	    }
	    
	    public ExceptionFunction<Object, User> call() {
	    	return i ->
	    	 util.complexargs.ComplexArgs.setEmptyBioString(user.get());
		}
	}

	static class CustomMatcherCheckBioNoParmTestData {
	    
	    public CustomMatcherCheckBioNoParmTestData() {
	    }
	}
		
	static class CustomMatcherCheckBioTestData {
	    public final String expectedCustomMatcher;
	    
	    public CustomMatcherCheckBioTestData(String expected) {
	    	this.expectedCustomMatcher = expected;
	    }
	}
//endregion

//region Utility Classes

//=========================================================================================================================
//Please modify this section only in the Modeleditor not here in the code, because otherwise it will cause merge conflicts!
//=========================================================================================================================
	public static class ObjectWrapper<T> {
		public T object;
		public String referencingMethodName;
		
		public ObjectWrapper(T object, String referencingMethodName) {
			this.object = object;
			this.referencingMethodName = referencingMethodName;
		}
		
		public T get() {
			return ActualResultStorage.getOrDefault(referencingMethodName, object);
		}
	}
	
	public static class ActualResultStorage {
		private static Map<String, Object> actualResultMap = new HashMap<>();
		
		public static void setStorage() {
			actualResultMap = new HashMap<>();
		}
		
		public static <T> void put(String key, T value) {
			actualResultMap.put(key, value);
		}
		
		@SuppressWarnings("unchecked")
		public static <T> T getOrDefault(String key, T defaultValue) {
			return (T) actualResultMap.getOrDefault(key, defaultValue);
		}
	}
	
	static class Result<TestData, TInstance, TReturn> {
		public final AssertType assertType;
		public final TReturn expectedReturnValue;
		public final Class<? extends Throwable> expectedException;
		public final BiConsumer<TInstance, TReturn> customAction;
		public final List<SideEffect<TestData>> sideEffects;
		
		public Result(AssertType assertType) {
			this(assertType, (TReturn) null, null);
		}
	
		public Result(AssertType assertType, List<SideEffect<TestData>> sideEffects) {
			this(assertType, (TReturn) null, sideEffects);
		}
	
		public Result(AssertType assertType, TReturn expectedReturnValue) {
			this(assertType, expectedReturnValue, null);
		}
	
		public Result(AssertType assertType, Class<? extends Throwable> expectedException) {
			this(assertType, expectedException, null);
		}
	
		public Result(AssertType assertType, BiConsumer<TInstance, TReturn> customAction) {
			this(assertType, customAction, null);
		}
	
		public Result(AssertType assertType, TReturn expectedReturnValue, List<SideEffect<TestData>> sideEffects) {
			this(assertType, expectedReturnValue, null, null, sideEffects);
		}
	
		public Result(AssertType assertType, Class<? extends Throwable> expectedException, List<SideEffect<TestData>> sideEffects) {
			this(assertType, null, expectedException, null, sideEffects);
		}
	
		public Result(AssertType assertType, BiConsumer<TInstance, TReturn> customAction, List<SideEffect<TestData>> sideEffects) {
			this(assertType, null, null, customAction, sideEffects);
		}
	
		public Result(AssertType assertType, TReturn expectedReturnValue, Class<? extends Throwable> expectedException,
			BiConsumer<TInstance, TReturn> customAction, List<SideEffect<TestData>> sideEffects) {
			this.assertType = assertType;
			this.expectedReturnValue = expectedReturnValue;
			this.expectedException = expectedException;
			this.customAction = customAction;
			this.sideEffects = sideEffects;
		}
	}
	
	static class SideEffect<TestData> {
	    public final Object expectedValue;
	    public final Function<TestData, Object> actualValueAccessor;
	    
		public SideEffect(Object expectedValue, Function<TestData, Object> actualValueAccessor) {
			this.expectedValue = expectedValue;
			this.actualValueAccessor = actualValueAccessor;
		}
	}
	
	public enum AssertType {
	    EXCEPTION, EXPECTED_VALUE, CUSTOM_ASSERTION
	}
	
	static class VoidR {
	}
	
	private static <I> ExceptionFunction<I, VoidR> asFunc(ExceptionConsumer<I> action) {
		return i -> {
			action.accept(i);
			return null;
		};
	}
	
	@FunctionalInterface
	public interface ExceptionFunction<I, R> {
		R apply(I i) throws Exception;
	}
	
	@FunctionalInterface
	public interface ExceptionConsumer<I> {
		void accept(I i) throws Exception;
	}
	
	private <TestData, I, R> void assertion(TestData data, String methodName, I instance, Result<TestData, I, R> expectedResult, ExceptionFunction<I, R> toApply) {
		if (expectedResult == null) {
			ActualResultStorage.put(methodName, assertDoesNotThrow(() -> toApply.apply(instance)));
			return;
		}
		R actualResult = null;
		if (expectedResult.assertType.equals(AssertType.EXCEPTION)) {
			assertThrows(expectedResult.expectedException, () -> toApply.apply(instance));
		} else {
			actualResult = assertDoesNotThrow(() -> toApply.apply(instance));
			if (expectedResult.assertType.equals(AssertType.EXPECTED_VALUE) &&
					!(expectedResult.expectedReturnValue instanceof VoidR)) {
				assertEquals(expectedResult.expectedReturnValue, actualResult);
			} else if (expectedResult.assertType.equals(AssertType.CUSTOM_ASSERTION)) {
				expectedResult.customAction.accept(instance, actualResult);
			}
			if (expectedResult.sideEffects != null) {
				for (var sideEffect : expectedResult.sideEffects) {
					var sideEffectResult = sideEffect.actualValueAccessor.apply(data);
					assertEquals(sideEffect.expectedValue, sideEffectResult);
				}
			}
		}
		ActualResultStorage.put(methodName, actualResult);
	}
//endregion
}

/*
WARNING: Modification of this comment will make it impossible to merge user-defined changes

BEGIN_CODEGEN_DATA
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
A==
END_CODEGEN_DATA
*/
