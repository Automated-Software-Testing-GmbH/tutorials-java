/*
* DO NOT MODIFY THIS COMMENT
* Generated by devmate
* Test model: b42e0875-3fa3-42a0-a76c-82348dd4af2f
*/
package util.complexargs;

import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;
import java.util.stream.Stream;

import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;

import models.User;

@SuppressWarnings("unused")
public class ComplexArgsTest {
	
//region Custom Assertions

	private static void assertIsDefaultBioSet(User result, CustomMatcherIsDefaultBioSetTestData data) {
		assertEquals("No bio available", result.getBio());
	}

	private static void assertIsDefaultBioSetWithParameter(User result, CustomMatcherIsDefaultBioSetWithParameterTestData data) {
		assertEquals(data.expectedCustomMatcher, result.getBio());
	}
//endregion

//region Scenarios
	//A new scenario
	@ParameterizedTest(name = "{1} [{index}] {2}")
	@MethodSource({"Scenario1Source"})
	public void Scenario1Test(Scenario1TestData data, String TestName, String TestDescription) {
		ActualResultStorage.setStorage(); //saves the results of the called Methods
		
		assertion(data, data.S1M1.methodName, null, data.S1M1.expectedResult, data.S1M1.call());
	}
//endregion

//region Data

//=========================================================================================================================
//Please modify this section only in the Modeleditor not here in the code, because otherwise it will cause merge conflicts!
//=========================================================================================================================
	//A new scenario
	private static Stream<Arguments> Scenario1Source() {
		return Stream.of(
			Arguments.of(
				new Scenario1TestData(
					/* S1M1 = */ new S1M1Parameters<>(
						/* User user = */ new User("John Brook", 34),
						/* referencingMethodName = */ "",
						/* expectedResult = */ new Result<>(
							/* assertType = */ AssertType.CUSTOM_ASSERTION,
							/* customAction = */ (i, r) -> assertIsDefaultBioSetWithParameter(r, 
								new CustomMatcherIsDefaultBioSetWithParameterTestData(
									/* expectedCustomMatcher = */ "No bio available"
								)
							)
						)
					)
				),
				/* testCaseName = */ "p1",
				/* testCaseDescription = */ ""
			)
		);
	}
//endregion

//region Types

//=========================================================================================================================
//Please modify this section only in the Modeleditor not here in the code, because otherwise it will cause merge conflicts!
//=========================================================================================================================
	static class Scenario1TestData {
	    public final S1M1Parameters<Scenario1TestData> S1M1;
	    
	    public Scenario1TestData(S1M1Parameters<Scenario1TestData> S1M1) {
	    	this.S1M1 = S1M1;
	    }
	}

	static class S1M1Parameters<TestData> {
		public final String methodName = "S1M1";
	    public final ObjectWrapper<User> user;
	    public final Result<TestData, Object, User> expectedResult;
		public S1M1Parameters(User user, String referencingMethodName, Result<TestData, Object, User> expectedResult) {
			this.user = new ObjectWrapper<>(user, referencingMethodName);
	   		this.expectedResult = expectedResult;
	    }
	    
	    public ExceptionFunction<Object, User> call() {
	    	return i ->
	    	 util.complexargs.ComplexArgs.setDefaultBioString(user.get());
		}
	}

	static class CustomMatcherIsDefaultBioSetTestData {
	    
	    public CustomMatcherIsDefaultBioSetTestData() {
	    }
	}
		
	static class CustomMatcherIsDefaultBioSetWithParameterTestData {
	    public final String expectedCustomMatcher;
	    
	    public CustomMatcherIsDefaultBioSetWithParameterTestData(String expected) {
	    	this.expectedCustomMatcher = expected;
	    }
	}
//endregion

//region Utility Classes

//=========================================================================================================================
//Please modify this section only in the Modeleditor not here in the code, because otherwise it will cause merge conflicts!
//=========================================================================================================================
	public static class ObjectWrapper<T> {
		public T object;
		public String referencingMethodName;
		
		public ObjectWrapper(T object, String referencingMethodName) {
			this.object = object;
			this.referencingMethodName = referencingMethodName;
		}
		
		public T get() {
			return ActualResultStorage.getOrDefault(referencingMethodName, object);
		}
	}
	
	public static class ActualResultStorage {
		private static Map<String, Object> actualResultMap = new HashMap<>();
		
		public static void setStorage() {
			actualResultMap = new HashMap<>();
		}
		
		public static <T> void put(String key, T value) {
			actualResultMap.put(key, value);
		}
		
		@SuppressWarnings("unchecked")
		public static <T> T getOrDefault(String key, T defaultValue) {
			return (T) actualResultMap.getOrDefault(key, defaultValue);
		}
	}
	
	static class Result<TestData, TInstance, TReturn> {
		public final AssertType assertType;
		public final TReturn expectedReturnValue;
		public final Class<? extends Throwable> expectedException;
		public final BiConsumer<TInstance, TReturn> customAction;
		public final List<SideEffect<TestData>> sideEffects;
		
		public Result(AssertType assertType) {
			this(assertType, (TReturn) null, null);
		}
	
		public Result(AssertType assertType, List<SideEffect<TestData>> sideEffects) {
			this(assertType, (TReturn) null, sideEffects);
		}
	
		public Result(AssertType assertType, TReturn expectedReturnValue) {
			this(assertType, expectedReturnValue, null);
		}
	
		public Result(AssertType assertType, Class<? extends Throwable> expectedException) {
			this(assertType, expectedException, null);
		}
	
		public Result(AssertType assertType, BiConsumer<TInstance, TReturn> customAction) {
			this(assertType, customAction, null);
		}
	
		public Result(AssertType assertType, TReturn expectedReturnValue, List<SideEffect<TestData>> sideEffects) {
			this(assertType, expectedReturnValue, null, null, sideEffects);
		}
	
		public Result(AssertType assertType, Class<? extends Throwable> expectedException, List<SideEffect<TestData>> sideEffects) {
			this(assertType, null, expectedException, null, sideEffects);
		}
	
		public Result(AssertType assertType, BiConsumer<TInstance, TReturn> customAction, List<SideEffect<TestData>> sideEffects) {
			this(assertType, null, null, customAction, sideEffects);
		}
	
		public Result(AssertType assertType, TReturn expectedReturnValue, Class<? extends Throwable> expectedException,
			BiConsumer<TInstance, TReturn> customAction, List<SideEffect<TestData>> sideEffects) {
			this.assertType = assertType;
			this.expectedReturnValue = expectedReturnValue;
			this.expectedException = expectedException;
			this.customAction = customAction;
			this.sideEffects = sideEffects;
		}
	}
	
	static class SideEffect<TestData> {
	    public final Object expectedValue;
	    public final Function<TestData, Object> actualValueAccessor;
	    
		public SideEffect(Object expectedValue, Function<TestData, Object> actualValueAccessor) {
			this.expectedValue = expectedValue;
			this.actualValueAccessor = actualValueAccessor;
		}
	}
	
	public enum AssertType {
	    EXCEPTION, EXPECTED_VALUE, CUSTOM_ASSERTION
	}
	
	static class VoidR {
	}
	
	private static <I> ExceptionFunction<I, VoidR> asFunc(ExceptionConsumer<I> action) {
		return i -> {
			action.accept(i);
			return null;
		};
	}
	
	@FunctionalInterface
	public interface ExceptionFunction<I, R> {
		R apply(I i) throws Exception;
	}
	
	@FunctionalInterface
	public interface ExceptionConsumer<I> {
		void accept(I i) throws Exception;
	}
	
	private <TestData, I, R> void assertion(TestData data, String methodName, I instance, Result<TestData, I, R> expectedResult, ExceptionFunction<I, R> toApply) {
		if (expectedResult == null) {
			ActualResultStorage.put(methodName, assertDoesNotThrow(() -> toApply.apply(instance)));
			return;
		}
		R actualResult = null;
		if (expectedResult.assertType.equals(AssertType.EXCEPTION)) {
			assertThrows(expectedResult.expectedException, () -> toApply.apply(instance));
		} else {
			actualResult = assertDoesNotThrow(() -> toApply.apply(instance));
			if (expectedResult.assertType.equals(AssertType.EXPECTED_VALUE) &&
					!(expectedResult.expectedReturnValue instanceof VoidR)) {
				assertEquals(expectedResult.expectedReturnValue, actualResult);
			} else if (expectedResult.assertType.equals(AssertType.CUSTOM_ASSERTION)) {
				expectedResult.customAction.accept(instance, actualResult);
			}
			if (expectedResult.sideEffects != null) {
				for (var sideEffect : expectedResult.sideEffects) {
					var sideEffectResult = sideEffect.actualValueAccessor.apply(data);
					assertEquals(sideEffect.expectedValue, sideEffectResult);
				}
			}
		}
		ActualResultStorage.put(methodName, actualResult);
	}
//endregion
}

/*
WARNING: Modification of this comment will make it impossible to merge user-defined changes

BEGIN_CODEGEN_DATA
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
9TKi4+tErppveYJJtz/Dz06kw0PJwAA
END_CODEGEN_DATA
*/
