/*
* DO NOT MODIFY THIS COMMENT
* Generated by devmate
* Test model: d13f80d2-8789-420b-821d-f8ec8d6f1aa7
*/
package util.complexargs;

import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;
import java.util.stream.Stream;

import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;

import models.User;

@SuppressWarnings("unused")
public class ComplexArgsTest {
	
//region Scenarios
	//A new scenario
	@ParameterizedTest(name = "{1} [{index}] {2}")
	@MethodSource({"Scenario1Source"})
	public void Scenario1Test(Scenario1TestData data, String TestName, String TestDescription) {
		ActualResultStorage.setStorage(); //saves the results of the called Methods
		
		assertion(data, data.S1M1.methodName, null, data.S1M1.expectedResult, data.S1M1.call());
	}
//endregion

//region Data

//=========================================================================================================================
//Please modify this section only in the Modeleditor not here in the code, because otherwise it will cause merge conflicts!
//=========================================================================================================================
	//A new scenario
	private static Stream<Arguments> Scenario1Source() {
		return Stream.of(
			Arguments.of(
				new Scenario1TestData(
					/* S1M1 = */ new S1M1Parameters<>(
						/* User user = */ new User("John Brook", 45),
						/* referencingMethodName = */ "",
						/* expectedResult = */ new Result<>(
							/* assertType = */ AssertType.EXPECTED_VALUE,
							/* expectedReturnValue = */ new User("John Brook", 45, "No bio available")
						)
					)
				),
				/* testCaseName = */ "p1",
				/* testCaseDescription = */ ""
			)
		);
	}
//endregion

//region Types

//=========================================================================================================================
//Please modify this section only in the Modeleditor not here in the code, because otherwise it will cause merge conflicts!
//=========================================================================================================================
	static class Scenario1TestData {
	    public final S1M1Parameters<Scenario1TestData> S1M1;
	    
	    public Scenario1TestData(S1M1Parameters<Scenario1TestData> S1M1) {
	    	this.S1M1 = S1M1;
	    }
	}

	static class S1M1Parameters<TestData> {
		public final String methodName = "S1M1";
	    public final ObjectWrapper<User> user;
	    public final Result<TestData, Object, User> expectedResult;
		public S1M1Parameters(User user, String referencingMethodName, Result<TestData, Object, User> expectedResult) {
			this.user = new ObjectWrapper<>(user, referencingMethodName);
	   		this.expectedResult = expectedResult;
	    }
	    
	    public ExceptionFunction<Object, User> call() {
	    	return i ->
	    	 util.complexargs.ComplexArgs.setDefaultBioString(user.get());
		}
	}
//endregion

//region Utility Classes

//=========================================================================================================================
//Please modify this section only in the Modeleditor not here in the code, because otherwise it will cause merge conflicts!
//=========================================================================================================================
	public static class ObjectWrapper<T> {
		public T object;
		public String referencingMethodName;
		
		public ObjectWrapper(T object, String referencingMethodName) {
			this.object = object;
			this.referencingMethodName = referencingMethodName;
		}
		
		public T get() {
			return ActualResultStorage.getOrDefault(referencingMethodName, object);
		}
	}
	
	public static class ActualResultStorage {
		private static Map<String, Object> actualResultMap = new HashMap<>();
		
		public static void setStorage() {
			actualResultMap = new HashMap<>();
		}
		
		public static <T> void put(String key, T value) {
			actualResultMap.put(key, value);
		}
		
		@SuppressWarnings("unchecked")
		public static <T> T getOrDefault(String key, T defaultValue) {
			return (T) actualResultMap.getOrDefault(key, defaultValue);
		}
	}
	
	static class Result<TestData, TInstance, TReturn> {
		public final AssertType assertType;
		public final TReturn expectedReturnValue;
		public final Class<? extends Throwable> expectedException;
		public final BiConsumer<TInstance, TReturn> customAction;
		public final List<SideEffect<TestData>> sideEffects;
		
		public Result(AssertType assertType) {
			this(assertType, (TReturn) null, null);
		}
	
		public Result(AssertType assertType, List<SideEffect<TestData>> sideEffects) {
			this(assertType, (TReturn) null, sideEffects);
		}
	
		public Result(AssertType assertType, TReturn expectedReturnValue) {
			this(assertType, expectedReturnValue, null);
		}
	
		public Result(AssertType assertType, Class<? extends Throwable> expectedException) {
			this(assertType, expectedException, null);
		}
	
		public Result(AssertType assertType, BiConsumer<TInstance, TReturn> customAction) {
			this(assertType, customAction, null);
		}
	
		public Result(AssertType assertType, TReturn expectedReturnValue, List<SideEffect<TestData>> sideEffects) {
			this(assertType, expectedReturnValue, null, null, sideEffects);
		}
	
		public Result(AssertType assertType, Class<? extends Throwable> expectedException, List<SideEffect<TestData>> sideEffects) {
			this(assertType, null, expectedException, null, sideEffects);
		}
	
		public Result(AssertType assertType, BiConsumer<TInstance, TReturn> customAction, List<SideEffect<TestData>> sideEffects) {
			this(assertType, null, null, customAction, sideEffects);
		}
	
		public Result(AssertType assertType, TReturn expectedReturnValue, Class<? extends Throwable> expectedException,
			BiConsumer<TInstance, TReturn> customAction, List<SideEffect<TestData>> sideEffects) {
			this.assertType = assertType;
			this.expectedReturnValue = expectedReturnValue;
			this.expectedException = expectedException;
			this.customAction = customAction;
			this.sideEffects = sideEffects;
		}
	}
	
	static class SideEffect<TestData> {
	    public final Object expectedValue;
	    public final Function<TestData, Object> actualValueAccessor;
	    
		public SideEffect(Object expectedValue, Function<TestData, Object> actualValueAccessor) {
			this.expectedValue = expectedValue;
			this.actualValueAccessor = actualValueAccessor;
		}
	}
	
	public enum AssertType {
	    EXCEPTION, EXPECTED_VALUE, CUSTOM_ASSERTION
	}
	
	static class VoidR {
	}
	
	private static <I> ExceptionFunction<I, VoidR> asFunc(ExceptionConsumer<I> action) {
		return i -> {
			action.accept(i);
			return null;
		};
	}
	
	@FunctionalInterface
	public interface ExceptionFunction<I, R> {
		R apply(I i) throws Exception;
	}
	
	@FunctionalInterface
	public interface ExceptionConsumer<I> {
		void accept(I i) throws Exception;
	}
	
	private <TestData, I, R> void assertion(TestData data, String methodName, I instance, Result<TestData, I, R> expectedResult, ExceptionFunction<I, R> toApply) {
		if (expectedResult == null) {
			ActualResultStorage.put(methodName, assertDoesNotThrow(() -> toApply.apply(instance)));
			return;
		}
		R actualResult = null;
		if (expectedResult.assertType.equals(AssertType.EXCEPTION)) {
			assertThrows(expectedResult.expectedException, () -> toApply.apply(instance));
		} else {
			actualResult = assertDoesNotThrow(() -> toApply.apply(instance));
			if (expectedResult.assertType.equals(AssertType.EXPECTED_VALUE) &&
					!(expectedResult.expectedReturnValue instanceof VoidR)) {
				assertEquals(expectedResult.expectedReturnValue, actualResult);
			} else if (expectedResult.assertType.equals(AssertType.CUSTOM_ASSERTION)) {
				expectedResult.customAction.accept(instance, actualResult);
			}
			if (expectedResult.sideEffects != null) {
				for (var sideEffect : expectedResult.sideEffects) {
					var sideEffectResult = sideEffect.actualValueAccessor.apply(data);
					assertEquals(sideEffect.expectedValue, sideEffectResult);
				}
			}
		}
		ActualResultStorage.put(methodName, actualResult);
	}
//endregion
}

/*
WARNING: Modification of this comment will make it impossible to merge user-defined changes

BEGIN_CODEGEN_DATA
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
END_CODEGEN_DATA
*/
