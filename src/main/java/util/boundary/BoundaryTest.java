/*
* DO NOT MODIFY THIS COMMENT
* Generated by devmate
* Test model: 796b216f-b4f6-4676-b0f2-c3e6c6c2a847
*/
package util.boundary;

import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;
import java.util.stream.Stream;

import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;

@SuppressWarnings("unused")
public class BoundaryTest {
	
//region Scenarios
	//A new scenario
	@ParameterizedTest(name = "{1} [{index}] {2}")
	@MethodSource({"Scenario1Source"})
	public void Scenario1Test(Scenario1TestData data, String TestName, String TestDescription) {
		ActualResultStorage.setStorage(); //saves the results of the called Methods
		
		assertion(data, data.S1M1.methodName, null, data.S1M1.expectedResult, data.S1M1.call());
	}
//endregion

//region Data

//=========================================================================================================================
//Please modify this section only in the Modeleditor not here in the code, because otherwise it will cause merge conflicts!
//=========================================================================================================================
	//A new scenario
	private static Stream<Arguments> Scenario1Source() {
		return Stream.of(
			Arguments.of(
				new Scenario1TestData(
					/* S1M1 = */ new S1M1Parameters<>(
						/* Integer age = */ 22,
						/* referencingMethodName = */ ""
						,
						/* expectedResult = */ new Result<>(
							/* assertType = */ AssertType.EXPECTED_VALUE,
							/* expectedReturnValue = */ true
						)
					)
				),
				/* testCaseName = */ "p1",
				/* testCaseDescription = */ ""
			),
			Arguments.of(
				new Scenario1TestData(
					/* S1M1 = */ new S1M1Parameters<>(
						/* Integer age = */ 18,
						/* referencingMethodName = */ ""
						,
						/* expectedResult = */ new Result<>(
							/* assertType = */ AssertType.EXPECTED_VALUE,
							/* expectedReturnValue = */ true
						)
					)
				),
				/* testCaseName = */ "p2",
				/* testCaseDescription = */ ""
			),
			Arguments.of(
				new Scenario1TestData(
					/* S1M1 = */ new S1M1Parameters<>(
						/* Integer age = */ 19,
						/* referencingMethodName = */ ""
						,
						/* expectedResult = */ new Result<>(
							/* assertType = */ AssertType.EXPECTED_VALUE,
							/* expectedReturnValue = */ true
						)
					)
				),
				/* testCaseName = */ "p3",
				/* testCaseDescription = */ ""
			),
			Arguments.of(
				new Scenario1TestData(
					/* S1M1 = */ new S1M1Parameters<>(
						/* Integer age = */ 25,
						/* referencingMethodName = */ ""
						,
						/* expectedResult = */ new Result<>(
							/* assertType = */ AssertType.EXPECTED_VALUE,
							/* expectedReturnValue = */ true
						)
					)
				),
				/* testCaseName = */ "p4",
				/* testCaseDescription = */ ""
			),
			Arguments.of(
				new Scenario1TestData(
					/* S1M1 = */ new S1M1Parameters<>(
						/* Integer age = */ 26,
						/* referencingMethodName = */ ""
						,
						/* expectedResult = */ new Result<>(
							/* assertType = */ AssertType.EXPECTED_VALUE,
							/* expectedReturnValue = */ false
						)
					)
				),
				/* testCaseName = */ "p5",
				/* testCaseDescription = */ ""
			),
			Arguments.of(
				new Scenario1TestData(
					/* S1M1 = */ new S1M1Parameters<>(
						/* Integer age = */ 10,
						/* referencingMethodName = */ ""
						,
						/* expectedResult = */ new Result<>(
							/* assertType = */ AssertType.EXPECTED_VALUE,
							/* expectedReturnValue = */ false
						)
					)
				),
				/* testCaseName = */ "n1",
				/* testCaseDescription = */ "M1:age: invalid"
			),
			Arguments.of(
				new Scenario1TestData(
					/* S1M1 = */ new S1M1Parameters<>(
						/* Integer age = */ 30,
						/* referencingMethodName = */ ""
						,
						/* expectedResult = */ new Result<>(
							/* assertType = */ AssertType.EXPECTED_VALUE,
							/* expectedReturnValue = */ false
						)
					)
				),
				/* testCaseName = */ "n2",
				/* testCaseDescription = */ "M1:age: invalid"
			),
			Arguments.of(
				new Scenario1TestData(
					/* S1M1 = */ new S1M1Parameters<>(
						/* Integer age = */ 17,
						/* referencingMethodName = */ ""
						,
						/* expectedResult = */ new Result<>(
							/* assertType = */ AssertType.EXPECTED_VALUE,
							/* expectedReturnValue = */ false
						)
					)
				),
				/* testCaseName = */ "n3",
				/* testCaseDescription = */ "M1:age: invalid boundaries"
			),
			Arguments.of(
				new Scenario1TestData(
					/* S1M1 = */ new S1M1Parameters<>(
						/* Integer age = */ 26,
						/* referencingMethodName = */ ""
						,
						/* expectedResult = */ new Result<>(
							/* assertType = */ AssertType.EXPECTED_VALUE,
							/* expectedReturnValue = */ false
						)
					)
				),
				/* testCaseName = */ "n4",
				/* testCaseDescription = */ "M1:age: invalid boundaries"
			)
		);
	}
//endregion

//region Types

//=========================================================================================================================
//Please modify this section only in the Modeleditor not here in the code, because otherwise it will cause merge conflicts!
//=========================================================================================================================
	static class Scenario1TestData {
	    public final S1M1Parameters<Scenario1TestData> S1M1;
	    
	    public Scenario1TestData(S1M1Parameters<Scenario1TestData> S1M1) {
	    	this.S1M1 = S1M1;
	    }
	}

	static class S1M1Parameters<TestData> {
		public final String methodName = "S1M1";
	    public final ObjectWrapper<Integer> age;
	    public final Result<TestData, Object, Boolean> expectedResult;
		public S1M1Parameters(Integer age, String referencingMethodName, Result<TestData, Object, Boolean> expectedResult) {
			this.age = new ObjectWrapper<>(age, referencingMethodName);
	   		this.expectedResult = expectedResult;
	    }
	    
	    public ExceptionFunction<Object, Boolean> call() {
	    	return i ->
	    	 util.boundary.Boundary.isInsurable(age.get());
		}
	}
//endregion

//region Utility Classes

//=========================================================================================================================
//Please modify this section only in the Modeleditor not here in the code, because otherwise it will cause merge conflicts!
//=========================================================================================================================
	public static class ObjectWrapper<T> {
		public T object;
		public String referencingMethodName;
		
		public ObjectWrapper(T object, String referencingMethodName) {
			this.object = object;
			this.referencingMethodName = referencingMethodName;
		}
		
		public T get() {
			return ActualResultStorage.getOrDefault(referencingMethodName, object);
		}
	}
	
	public static class ActualResultStorage {
		private static Map<String, Object> actualResultMap = new HashMap<>();
		
		public static void setStorage() {
			actualResultMap = new HashMap<>();
		}
		
		public static <T> void put(String key, T value) {
			actualResultMap.put(key, value);
		}
		
		@SuppressWarnings("unchecked")
		public static <T> T getOrDefault(String key, T defaultValue) {
			return (T) actualResultMap.getOrDefault(key, defaultValue);
		}
	}
	
	static class Result<TestData, TInstance, TReturn> {
		public final AssertType assertType;
		public final TReturn expectedReturnValue;
		public final Class<? extends Throwable> expectedException;
		public final BiConsumer<TInstance, TReturn> customAction;
		public final List<SideEffect<TestData>> sideEffects;
		
		public Result(AssertType assertType) {
			this(assertType, (TReturn) null, null);
		}
	
		public Result(AssertType assertType, List<SideEffect<TestData>> sideEffects) {
			this(assertType, (TReturn) null, sideEffects);
		}
	
		public Result(AssertType assertType, TReturn expectedReturnValue) {
			this(assertType, expectedReturnValue, null);
		}
	
		public Result(AssertType assertType, Class<? extends Throwable> expectedException) {
			this(assertType, expectedException, null);
		}
	
		public Result(AssertType assertType, BiConsumer<TInstance, TReturn> customAction) {
			this(assertType, customAction, null);
		}
	
		public Result(AssertType assertType, TReturn expectedReturnValue, List<SideEffect<TestData>> sideEffects) {
			this(assertType, expectedReturnValue, null, null, sideEffects);
		}
	
		public Result(AssertType assertType, Class<? extends Throwable> expectedException, List<SideEffect<TestData>> sideEffects) {
			this(assertType, null, expectedException, null, sideEffects);
		}
	
		public Result(AssertType assertType, BiConsumer<TInstance, TReturn> customAction, List<SideEffect<TestData>> sideEffects) {
			this(assertType, null, null, customAction, sideEffects);
		}
	
		public Result(AssertType assertType, TReturn expectedReturnValue, Class<? extends Throwable> expectedException,
			BiConsumer<TInstance, TReturn> customAction, List<SideEffect<TestData>> sideEffects) {
			this.assertType = assertType;
			this.expectedReturnValue = expectedReturnValue;
			this.expectedException = expectedException;
			this.customAction = customAction;
			this.sideEffects = sideEffects;
		}
	}
	
	static class SideEffect<TestData> {
	    public final Object expectedValue;
	    public final Function<TestData, Object> actualValueAccessor;
	    
		public SideEffect(Object expectedValue, Function<TestData, Object> actualValueAccessor) {
			this.expectedValue = expectedValue;
			this.actualValueAccessor = actualValueAccessor;
		}
	}
	
	public enum AssertType {
	    EXCEPTION, EXPECTED_VALUE, CUSTOM_ASSERTION
	}
	
	static class VoidR {
	}
	
	private static <I> ExceptionFunction<I, VoidR> asFunc(ExceptionConsumer<I> action) {
		return i -> {
			action.accept(i);
			return null;
		};
	}
	
	@FunctionalInterface
	public interface ExceptionFunction<I, R> {
		R apply(I i) throws Exception;
	}
	
	@FunctionalInterface
	public interface ExceptionConsumer<I> {
		void accept(I i) throws Exception;
	}
	
	private <TestData, I, R> void assertion(TestData data, String methodName, I instance, Result<TestData, I, R> expectedResult, ExceptionFunction<I, R> toApply) {
		if (expectedResult == null) {
			ActualResultStorage.put(methodName, assertDoesNotThrow(() -> toApply.apply(instance)));
			return;
		}
		R actualResult = null;
		if (expectedResult.assertType.equals(AssertType.EXCEPTION)) {
			assertThrows(expectedResult.expectedException, () -> toApply.apply(instance));
		} else {
			actualResult = assertDoesNotThrow(() -> toApply.apply(instance));
			if (expectedResult.assertType.equals(AssertType.EXPECTED_VALUE) &&
					!(expectedResult.expectedReturnValue instanceof VoidR)) {
				assertEquals(expectedResult.expectedReturnValue, actualResult);
			} else if (expectedResult.assertType.equals(AssertType.CUSTOM_ASSERTION)) {
				expectedResult.customAction.accept(instance, actualResult);
			}
			if (expectedResult.sideEffects != null) {
				for (var sideEffect : expectedResult.sideEffects) {
					var sideEffectResult = sideEffect.actualValueAccessor.apply(data);
					assertEquals(sideEffect.expectedValue, sideEffectResult);
				}
			}
		}
		ActualResultStorage.put(methodName, actualResult);
	}
//endregion
}

/*
WARNING: Modification of this comment will make it impossible to merge user-defined changes

BEGIN_CODEGEN_DATA
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
pLgAA
END_CODEGEN_DATA
*/
