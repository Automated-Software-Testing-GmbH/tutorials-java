/*
* DO NOT MODIFY THIS COMMENT
* Generated by devmate
* Test model: 2f98fe05-8690-47a9-9ee0-1512ee00eb2e
*/
package util.exceptions;

import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;
import java.util.stream.Stream;

import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;

@SuppressWarnings("unused")
public class ExceptionDemoTest {
	
//region Scenarios
	//A new scenario
	@ParameterizedTest(name = "{1} [{index}] {2}")
	@MethodSource({"Scenario1Source"})
	public void Scenario1Test(Scenario1TestData data, String TestName, String TestDescription) {
		ActualResultStorage.setStorage(); //saves the results of the called Methods
		
		assertion(data, data.S1M1.methodName, null, data.S1M1.expectedResult, data.S1M1.call());
		
		assertion(data, data.S1M2.methodName, null, data.S1M2.expectedResult, data.S1M2.call());
	}
//endregion

//region Data

//=========================================================================================================================
//Please modify this section only in the Modeleditor not here in the code, because otherwise it will cause merge conflicts!
//=========================================================================================================================
	//A new scenario
	private static Stream<Arguments> Scenario1Source() {
		return Stream.of(
			Arguments.of(
				new Scenario1TestData(
					/* S1M1 = */ new S1M1Parameters<>(
						/* Integer number = */ 100,
						/* Integer divisor = */ 20,
						/* referencingMethodName = */ new String[2],
						/* expectedResult = */ new Result<>(
							/* assertType = */ AssertType.EXPECTED_VALUE,
							/* expectedReturnValue = */ 5d
						)
					),
					/* S1M2 = */ new S1M2Parameters<>(
						/* Integer number = */ 100,
						/* Integer divisor = */ 20,
						/* referencingMethodName = */ new String[2],
						/* expectedResult = */ new Result<>(
							/* assertType = */ AssertType.EXPECTED_VALUE,
							/* expectedReturnValue = */ 5d
						)
					)
				),
				/* testCaseName = */ "p1",
				/* testCaseDescription = */ ""
			),
			Arguments.of(
				new Scenario1TestData(
					/* S1M1 = */ new S1M1Parameters<>(
						/* Integer number = */ 100,
						/* Integer divisor = */ 0,
						/* referencingMethodName = */ new String[2],
						/* expectedResult = */ new Result<>(
							/* assertType = */ AssertType.EXCEPTION,
							/* expectedException = */ DivideByZeroException.class
						)
					),
					/* S1M2 = */ new S1M2Parameters<>(
						/* Integer number = */ 100,
						/* Integer divisor = */ 20,
						/* referencingMethodName = */ new String[2],
						/* expectedResult = */ new Result<>(
							/* assertType = */ AssertType.EXCEPTION,
							/* expectedException = */ Exception.class
						)
					)
				),
				/* testCaseName = */ "n1",
				/* testCaseDescription = */ "M1:divisor: invalid"
			),
			Arguments.of(
				new Scenario1TestData(
					/* S1M1 = */ new S1M1Parameters<>(
						/* Integer number = */ 100,
						/* Integer divisor = */ 20,
						/* referencingMethodName = */ new String[2],
						/* expectedResult = */ new Result<>(
							/* assertType = */ AssertType.EXPECTED_VALUE,
							/* expectedReturnValue = */ 5d
						)
					),
					/* S1M2 = */ new S1M2Parameters<>(
						/* Integer number = */ 100,
						/* Integer divisor = */ 0,
						/* referencingMethodName = */ new String[2],
						/* expectedResult = */ new Result<>(
							/* assertType = */ AssertType.EXPECTED_VALUE,
							/* expectedReturnValue = */ 5d
						)
					)
				),
				/* testCaseName = */ "n2",
				/* testCaseDescription = */ "M2:divisor: invalid"
			)
		);
	}
//endregion

//region Types

//=========================================================================================================================
//Please modify this section only in the Modeleditor not here in the code, because otherwise it will cause merge conflicts!
//=========================================================================================================================
	static class Scenario1TestData {
	    public final S1M1Parameters<Scenario1TestData> S1M1;
	    public final S1M2Parameters<Scenario1TestData> S1M2;
	    
	    public Scenario1TestData(S1M1Parameters<Scenario1TestData> S1M1, S1M2Parameters<Scenario1TestData> S1M2) {
	    	this.S1M1 = S1M1;
	    	this.S1M2 = S1M2;
	    }
	}

	static class S1M1Parameters<TestData> {
		public final String methodName = "S1M1";
	    public final ObjectWrapper<Integer> number;
	    public final ObjectWrapper<Integer> divisor;
	    public final Result<TestData, Object, Double> expectedResult;
		public S1M1Parameters(Integer number, Integer divisor, String[] referencingMethodName, Result<TestData, Object, Double> expectedResult) {
			this.number = new ObjectWrapper<>(number, referencingMethodName[0]);
			this.divisor = new ObjectWrapper<>(divisor, referencingMethodName[1]);
	   		this.expectedResult = expectedResult;
	    }
	    
	    public ExceptionFunction<Object, Double> call() {
	    	return i ->
	    	 util.exceptions.ExceptionDemo.userException(number.get(), divisor.get());
		}
	}
		
	static class S1M2Parameters<TestData> {
		public final String methodName = "S1M2";
	    public final ObjectWrapper<Integer> number;
	    public final ObjectWrapper<Integer> divisor;
	    public final Result<TestData, Object, Double> expectedResult;
		public S1M2Parameters(Integer number, Integer divisor, String[] referencingMethodName, Result<TestData, Object, Double> expectedResult) {
			this.number = new ObjectWrapper<>(number, referencingMethodName[0]);
			this.divisor = new ObjectWrapper<>(divisor, referencingMethodName[1]);
	   		this.expectedResult = expectedResult;
	    }
	    
	    public ExceptionFunction<Object, Double> call() {
	    	return i ->
	    	 generalException(number.get(), divisor.get());
		}
	}
//endregion

//region Utility Classes

//=========================================================================================================================
//Please modify this section only in the Modeleditor not here in the code, because otherwise it will cause merge conflicts!
//=========================================================================================================================
	public static class ObjectWrapper<T> {
		public T object;
		public String referencingMethodName;
		
		public ObjectWrapper(T object, String referencingMethodName) {
			this.object = object;
			this.referencingMethodName = referencingMethodName;
		}
		
		public T get() {
			return ActualResultStorage.getOrDefault(referencingMethodName, object);
		}
	}
	
	public static class ActualResultStorage {
		private static Map<String, Object> actualResultMap = new HashMap<>();
		
		public static void setStorage() {
			actualResultMap = new HashMap<>();
		}
		
		public static <T> void put(String key, T value) {
			actualResultMap.put(key, value);
		}
		
		@SuppressWarnings("unchecked")
		public static <T> T getOrDefault(String key, T defaultValue) {
			return (T) actualResultMap.getOrDefault(key, defaultValue);
		}
	}
	
	static class Result<TestData, TInstance, TReturn> {
		public final AssertType assertType;
		public final TReturn expectedReturnValue;
		public final Class<? extends Throwable> expectedException;
		public final BiConsumer<TInstance, TReturn> customAction;
		public final List<SideEffect<TestData>> sideEffects;
		
		public Result(AssertType assertType) {
			this(assertType, (TReturn) null, null);
		}
	
		public Result(AssertType assertType, List<SideEffect<TestData>> sideEffects) {
			this(assertType, (TReturn) null, sideEffects);
		}
	
		public Result(AssertType assertType, TReturn expectedReturnValue) {
			this(assertType, expectedReturnValue, null);
		}
	
		public Result(AssertType assertType, Class<? extends Throwable> expectedException) {
			this(assertType, expectedException, null);
		}
	
		public Result(AssertType assertType, BiConsumer<TInstance, TReturn> customAction) {
			this(assertType, customAction, null);
		}
	
		public Result(AssertType assertType, TReturn expectedReturnValue, List<SideEffect<TestData>> sideEffects) {
			this(assertType, expectedReturnValue, null, null, sideEffects);
		}
	
		public Result(AssertType assertType, Class<? extends Throwable> expectedException, List<SideEffect<TestData>> sideEffects) {
			this(assertType, null, expectedException, null, sideEffects);
		}
	
		public Result(AssertType assertType, BiConsumer<TInstance, TReturn> customAction, List<SideEffect<TestData>> sideEffects) {
			this(assertType, null, null, customAction, sideEffects);
		}
	
		public Result(AssertType assertType, TReturn expectedReturnValue, Class<? extends Throwable> expectedException,
			BiConsumer<TInstance, TReturn> customAction, List<SideEffect<TestData>> sideEffects) {
			this.assertType = assertType;
			this.expectedReturnValue = expectedReturnValue;
			this.expectedException = expectedException;
			this.customAction = customAction;
			this.sideEffects = sideEffects;
		}
	}
	
	static class SideEffect<TestData> {
	    public final Object expectedValue;
	    public final Function<TestData, Object> actualValueAccessor;
	    
		public SideEffect(Object expectedValue, Function<TestData, Object> actualValueAccessor) {
			this.expectedValue = expectedValue;
			this.actualValueAccessor = actualValueAccessor;
		}
	}
	
	public enum AssertType {
	    EXCEPTION, EXPECTED_VALUE, CUSTOM_ASSERTION
	}
	
	static class VoidR {
	}
	
	private static <I> ExceptionFunction<I, VoidR> asFunc(ExceptionConsumer<I> action) {
		return i -> {
			action.accept(i);
			return null;
		};
	}
	
	@FunctionalInterface
	public interface ExceptionFunction<I, R> {
		R apply(I i) throws Exception;
	}
	
	@FunctionalInterface
	public interface ExceptionConsumer<I> {
		void accept(I i) throws Exception;
	}
	
	private <TestData, I, R> void assertion(TestData data, String methodName, I instance, Result<TestData, I, R> expectedResult, ExceptionFunction<I, R> toApply) {
		if (expectedResult == null) {
			ActualResultStorage.put(methodName, assertDoesNotThrow(() -> toApply.apply(instance)));
			return;
		}
		R actualResult = null;
		if (expectedResult.assertType.equals(AssertType.EXCEPTION)) {
			assertThrows(expectedResult.expectedException, () -> toApply.apply(instance));
		} else {
			actualResult = assertDoesNotThrow(() -> toApply.apply(instance));
			if (expectedResult.assertType.equals(AssertType.EXPECTED_VALUE) &&
					!(expectedResult.expectedReturnValue instanceof VoidR)) {
				assertEquals(expectedResult.expectedReturnValue, actualResult);
			} else if (expectedResult.assertType.equals(AssertType.CUSTOM_ASSERTION)) {
				expectedResult.customAction.accept(instance, actualResult);
			}
			if (expectedResult.sideEffects != null) {
				for (var sideEffect : expectedResult.sideEffects) {
					var sideEffectResult = sideEffect.actualValueAccessor.apply(data);
					assertEquals(sideEffect.expectedValue, sideEffectResult);
				}
			}
		}
		ActualResultStorage.put(methodName, actualResult);
	}
//endregion
}

/*
WARNING: Modification of this comment will make it impossible to merge user-defined changes

BEGIN_CODEGEN_DATA
H4sIAAAAAAAA/+0abU/bOPhzkfgPXj9MyZSFtdJ9WUtvHfR0SOtAtGOnQ2gyqVu8pUkuTso4xH8/v8WxEwda2AQ7gUT
b2M/7m/3YSWDwDS4QyDMc+uh7gJIMxxHpbW9tb+FlEqcZIBnMcADidOF/zSOc0c8EZyj1YYL9ISEo5Sg+5D/3Y0Q+xt
n0Io0ve/ekMfonhyG5LzZnbWjwFa6gzzX8E5KLMUx6lqkPmGS28QbweR4FjKv/Hu9R3vkSpbeC/SF/2IBIliK49Cf8S
xe8rnECU7gk/hH7QnQA/4tmU6RL3oiTpPEKz+jzMF1QcaOMbII0RtlFPJvEeRogLuK7SZ4kKSLkM0wjHC2I086jnKBZ
293eSvLzkHosCKlLwKgIq320jJmw4Hp7q7W9tbOTogUdBpMARTDFMaHDOztDEKFLQOQYHXpX09aJ6DPYBe3rzg04vcb
RDH2/OQPX3RvGvPVOF9a5bhf0O2KkfcOApIirGM+UAB1O3HjahxkEM/rhAeofqidgox8pf2NgH5EgxVxLl6vXGgYZje
JjRPIwm2RxSrPMJ6j46bg9sLND4AoRkF0gkHI4AuI5fwxgGKIZEHows7TYPyxC3RECsU9/0hl3/CUHFFJFeRjqc+h7g
oIMzYQo+gzj4rhu7y763Vvodxvpd3X6N8zdKJoJj7P4Ud5nFhYDu4/1x5gfhQgSBJbxDM+vqBMwAQTxlAVxFF4BHHHP
jOMZoq7B1I0gijNwgVJUzAV0zgPnKIA0D0BMh9JLTH/hDFziMARinFaKBYON5jT+MvLikTW3ZVyS4hXMUFF4RWHqq7o
xAJWMcmTMpyjL00jC+/HcYYMthadGWoxfLc3kXGvnFWDhSfP71Q6XjD2pGkD6gwKQQR5EGVog6ot8eU6/OE7nzRvPAj
LDK0xiCdM1QFI0p36MAprOYxXqmgA80U+7ZzqOGfclsHjWpGTAcmm6SiTVoXr2R38djfamo/0vJ8MPn0aejlWyYHY9g
WEu0X8roFz5w/UM43UN43WfjXe78cR3YUOKm9GQ3KPloNSknXTa9Xmt7EuwNoeRpJ5k5D8h3+2NjqYHhx+tblO7BoG3
j9k+5P3V3yiN1ZTPNxjPuXAPe95lw3VSIlovJcadt9Jib+lKuYIhnj39LHlKbv3l1of/me3WyoXuernQbcoF9nnXVpn
pRJ73yo+meUtuiEVfW+8T2SYY0D/ZW85xBMNqdaphDThErwG1eydqt0A1KdTL53qCeGtydZW2LRYAvizJui5qoismlK
Q3IsxrBjUFLPnx5sK0jGi9l3pBaTP8ttWQh+dfaXx+TmGSoLQva9ZA1rVNMGTyWlFkcSrE9iQND+zHFAwNKlWtpylla
u6YdderFtni5OH0zF5cvU1Fke2b8Jcq9qzgmmYYOIVEVr6nb87EYYIgVC4JNkpKFzupjiDFokhQqy0JdWsWoVVPBrXb
KY7h+lWDiLOKMqZlK4vB60ExVD0k9Y2DLZ/Wq1SNSEP5C5Q5rlc4TjwKG8kc4Ccv1SzoPjALur9sFnSfs+CpZ8ECRSi
F4eah3rSr+UTTCmdXYI+F//P+5hE1LxLRqEdmyE7NOjQFMZ820lhUJWtEq7NmCWsQdwpq3q00jDwVCDQRNDnETFPf0S
zXTUW4KeBBLNnJXLCd61Oww3QfzSEdcxqKkZDPrP0NFrewkEY3z2XHMOkLQxWlbQCghkvnZdmR91604LhVD0ha/B5Ev
5+QWq9Hr2o5SZRFCyec5JkjXfoNXXnUsivWcDUw8Rk4hxNQJgvrxVNwgYJv4u7JJgT3ZOkiU5SZGD3RJZLOdqZu1aKm
szkJg0DVwYZnayvS9CCiAFFAA2QqOlHbOl92tFqz26uBSQq21rYOzKtt/3cKnNGyTAC/NoXGsqhKfB27vPXs21QIcpL
Fy2FgR2ZXrf0JnqHRfE4ZlVucASBqlFQDVdjOsdpCLwlOOexRBwqRXHltxT5LF61J3VtT4rWl0HE2F+YWNzdKYIG9tz
E2iZw7BVKQ9xZng1BslEYHurcgt/jlwRHU6D/vh4TUJi59sC5C4IYAeKgmG0TDD1JEfJqEf1qCb+gqLvdPNokP9fPXy
vpU7Vr0s9amZcrE0e8t7AuTgNfVoKC1FUhAaTpQoOpq07Rs2+xhP+wT2zAlqFKqBqhasGp3WmzhOOowCOhGp+y09V22
ksmxMfU25GB41KCk2b3qIwsdFgJ2+S27XkRbR31zU5i0vMkClRN8sPdpMj0cfxlOJqNjBtHgsRO66zzm9AqO5ta5fzC
wtMMHnkCkFiJs0FEgKoMOuPXKtUTrkMvNLLtWgwFDdbA8C5BwrFgIY/RK2d4VAsCQnXGkcxig0ki4GLILfCz5HgPaQ4
VXzgHALu1A2TtwwMiT+zLTVeec+I5eqncXt8LsWhAKmQUR9cKR/VUr/bUjyknVrto2WtCsvonUZK8sHjJTSQ/iOXCqx
yq7Yg8gPWpr+ViLootXf/vRoT3Ua8XMF94pdHBdIy7KDufY6DfAbhkxdTm1yusj/s6ktqKU18GuarO09yOrpCzL8e3y
C5EBCgmydHFqJdjAIsIgm6upFwgXvHy5La7tXjSpqK9CBfd4LjJf2aqlv4q6BiXP8JvURZpnU5WqNa4UqkJFX+RUwVF
ZYhOoycT6uvjCjP7WnFZ1ZwVTbbkEb0EzAYXYMpFUZJRDthVExgUrBFLqijM09MqSV+VV4N+UyvOPtRK6ar3qCSZ9/g
9fBxwDPi0AAA==
END_CODEGEN_DATA
*/
