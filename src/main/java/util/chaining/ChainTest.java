/*
* DO NOT MODIFY THIS COMMENT
* Generated by devmate
* Test model: 05418ee3-529f-45ba-a1f6-fb04adc769ea
*/
package util.chaining;

import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;
import java.util.stream.Stream;

import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;

@SuppressWarnings("unused")
public class ChainTest {
	
//region Scenarios
	//A new scenario
	@ParameterizedTest(name = "{1} [{index}] {2}")
	@MethodSource({"Scenario1Source"})
	public void Scenario1Test(Scenario1TestData data, String TestName, String TestDescription) {
		ActualResultStorage.setStorage(); //saves the results of the called Methods
		
		assertion(data, data.S1M1.methodName, null, data.S1M1.expectedResult, data.S1M1.call());
		
		assertion(data, data.S1M2.methodName, null, data.S1M2.expectedResult, data.S1M2.call());
	}
//endregion

//region Data

//=========================================================================================================================
//Please modify this section only in the Modeleditor not here in the code, because otherwise it will cause merge conflicts!
//=========================================================================================================================
	//A new scenario
	private static Stream<Arguments> Scenario1Source() {
		return Stream.of(
			Arguments.of(
				new Scenario1TestData(
					/* S1M1 = */ new S1M1Parameters<>(
						/* Integer input = */ 3,
						/* referencingMethodName = */ "",
						/* expectedResult = */ new Result<>(
							/* assertType = */ AssertType.EXPECTED_VALUE,
							/* expectedReturnValue = */ 30
						)
					),
					/* S1M2 = */ new S1M2Parameters<>(
						/* Integer input = */ 0,
						/* referencingMethodName = */ "M1",
						/* expectedResult = */ new Result<>(
							/* assertType = */ AssertType.EXPECTED_VALUE,
							/* expectedReturnValue = */ 300
						)
					)
				),
				/* testCaseName = */ "p1",
				/* testCaseDescription = */ ""
			),
			Arguments.of(
				new Scenario1TestData(
					/* S1M1 = */ new S1M1Parameters<>(
						/* Integer input = */ 0,
						/* referencingMethodName = */ "",
						/* expectedResult = */ new Result<>(
							/* assertType = */ AssertType.EXCEPTION,
							/* expectedException = */ Exception.class
						)
					),
					/* S1M2 = */ new S1M2Parameters<>(
						/* Integer input = */ 0,
						/* referencingMethodName = */ "M1",
						/* expectedResult = */ new Result<>(
							/* assertType = */ AssertType.EXPECTED_VALUE,
							/* expectedReturnValue = */ 300
						)
					)
				),
				/* testCaseName = */ "n1",
				/* testCaseDescription = */ "M1:input: invalid"
			)
		);
	}
//endregion

//region Types

//=========================================================================================================================
//Please modify this section only in the Modeleditor not here in the code, because otherwise it will cause merge conflicts!
//=========================================================================================================================
	static class Scenario1TestData {
	    public final S1M1Parameters<Scenario1TestData> S1M1;
	    public final S1M2Parameters<Scenario1TestData> S1M2;
	    
	    public Scenario1TestData(S1M1Parameters<Scenario1TestData> S1M1, S1M2Parameters<Scenario1TestData> S1M2) {
	    	this.S1M1 = S1M1;
	    	this.S1M2 = S1M2;
	    }
	}

	static class S1M1Parameters<TestData> {
		public final String methodName = "S1M1";
	    public final ObjectWrapper<Integer> input;
	    public final Result<TestData, Object, Integer> expectedResult;
		public S1M1Parameters(Integer input, String referencingMethodName, Result<TestData, Object, Integer> expectedResult) {
			this.input = new ObjectWrapper<>(input, referencingMethodName);
	   		this.expectedResult = expectedResult;
	    }
	    
	    public ExceptionFunction<Object, Integer> call() {
	    	return i ->
	    	 util.chaining.Chain.multiplyPositiveByTen(input.get());
		}
	}
		
	static class S1M2Parameters<TestData> {
		public final String methodName = "S1M2";
	    public final ObjectWrapper<Integer> input;
	    public final Result<TestData, Object, Integer> expectedResult;
		public S1M2Parameters(Integer input, String referencingMethodName, Result<TestData, Object, Integer> expectedResult) {
			this.input = new ObjectWrapper<>(input, referencingMethodName);
	   		this.expectedResult = expectedResult;
	    }
	    
	    public ExceptionFunction<Object, Integer> call() {
	    	return i ->
	    	 multiplyPositiveByTen(input.get());
		}
	}
//endregion

//region Utility Classes

//=========================================================================================================================
//Please modify this section only in the Modeleditor not here in the code, because otherwise it will cause merge conflicts!
//=========================================================================================================================
	public static class ObjectWrapper<T> {
		public T object;
		public String referencingMethodName;
		
		public ObjectWrapper(T object, String referencingMethodName) {
			this.object = object;
			this.referencingMethodName = referencingMethodName;
		}
		
		public T get() {
			return ActualResultStorage.getOrDefault(referencingMethodName, object);
		}
	}
	
	public static class ActualResultStorage {
		private static Map<String, Object> actualResultMap = new HashMap<>();
		
		public static void setStorage() {
			actualResultMap = new HashMap<>();
		}
		
		public static <T> void put(String key, T value) {
			actualResultMap.put(key, value);
		}
		
		@SuppressWarnings("unchecked")
		public static <T> T getOrDefault(String key, T defaultValue) {
			return (T) actualResultMap.getOrDefault(key, defaultValue);
		}
	}
	
	static class Result<TestData, TInstance, TReturn> {
		public final AssertType assertType;
		public final TReturn expectedReturnValue;
		public final Class<? extends Throwable> expectedException;
		public final BiConsumer<TInstance, TReturn> customAction;
		public final List<SideEffect<TestData>> sideEffects;
		
		public Result(AssertType assertType) {
			this(assertType, (TReturn) null, null);
		}
	
		public Result(AssertType assertType, List<SideEffect<TestData>> sideEffects) {
			this(assertType, (TReturn) null, sideEffects);
		}
	
		public Result(AssertType assertType, TReturn expectedReturnValue) {
			this(assertType, expectedReturnValue, null);
		}
	
		public Result(AssertType assertType, Class<? extends Throwable> expectedException) {
			this(assertType, expectedException, null);
		}
	
		public Result(AssertType assertType, BiConsumer<TInstance, TReturn> customAction) {
			this(assertType, customAction, null);
		}
	
		public Result(AssertType assertType, TReturn expectedReturnValue, List<SideEffect<TestData>> sideEffects) {
			this(assertType, expectedReturnValue, null, null, sideEffects);
		}
	
		public Result(AssertType assertType, Class<? extends Throwable> expectedException, List<SideEffect<TestData>> sideEffects) {
			this(assertType, null, expectedException, null, sideEffects);
		}
	
		public Result(AssertType assertType, BiConsumer<TInstance, TReturn> customAction, List<SideEffect<TestData>> sideEffects) {
			this(assertType, null, null, customAction, sideEffects);
		}
	
		public Result(AssertType assertType, TReturn expectedReturnValue, Class<? extends Throwable> expectedException,
			BiConsumer<TInstance, TReturn> customAction, List<SideEffect<TestData>> sideEffects) {
			this.assertType = assertType;
			this.expectedReturnValue = expectedReturnValue;
			this.expectedException = expectedException;
			this.customAction = customAction;
			this.sideEffects = sideEffects;
		}
	}
	
	static class SideEffect<TestData> {
	    public final Object expectedValue;
	    public final Function<TestData, Object> actualValueAccessor;
	    
		public SideEffect(Object expectedValue, Function<TestData, Object> actualValueAccessor) {
			this.expectedValue = expectedValue;
			this.actualValueAccessor = actualValueAccessor;
		}
	}
	
	public enum AssertType {
	    EXCEPTION, EXPECTED_VALUE, CUSTOM_ASSERTION
	}
	
	static class VoidR {
	}
	
	private static <I> ExceptionFunction<I, VoidR> asFunc(ExceptionConsumer<I> action) {
		return i -> {
			action.accept(i);
			return null;
		};
	}
	
	@FunctionalInterface
	public interface ExceptionFunction<I, R> {
		R apply(I i) throws Exception;
	}
	
	@FunctionalInterface
	public interface ExceptionConsumer<I> {
		void accept(I i) throws Exception;
	}
	
	private <TestData, I, R> void assertion(TestData data, String methodName, I instance, Result<TestData, I, R> expectedResult, ExceptionFunction<I, R> toApply) {
		if (expectedResult == null) {
			ActualResultStorage.put(methodName, assertDoesNotThrow(() -> toApply.apply(instance)));
			return;
		}
		R actualResult = null;
		if (expectedResult.assertType.equals(AssertType.EXCEPTION)) {
			assertThrows(expectedResult.expectedException, () -> toApply.apply(instance));
		} else {
			actualResult = assertDoesNotThrow(() -> toApply.apply(instance));
			if (expectedResult.assertType.equals(AssertType.EXPECTED_VALUE) &&
					!(expectedResult.expectedReturnValue instanceof VoidR)) {
				assertEquals(expectedResult.expectedReturnValue, actualResult);
			} else if (expectedResult.assertType.equals(AssertType.CUSTOM_ASSERTION)) {
				expectedResult.customAction.accept(instance, actualResult);
			}
			if (expectedResult.sideEffects != null) {
				for (var sideEffect : expectedResult.sideEffects) {
					var sideEffectResult = sideEffect.actualValueAccessor.apply(data);
					assertEquals(sideEffect.expectedValue, sideEffectResult);
				}
			}
		}
		ActualResultStorage.put(methodName, actualResult);
	}
//endregion
}

/*
WARNING: Modification of this comment will make it impossible to merge user-defined changes

BEGIN_CODEGEN_DATA
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
A
END_CODEGEN_DATA
*/
