/*
* DO NOT MODIFY THIS COMMENT
* Generated by devmate
* Test model: d3c2932e-3968-471b-b0be-f97053479767
*/
package util.alltogether;

import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;
import java.util.stream.Stream;

import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;
import org.joda.time.DateTime;

@SuppressWarnings("unused")
public class AllTogetherTest {
	
//region Custom Assertions
	private static void assertIsApproved(AllTogether instance, CreditReturnStatus result, CustomMatcherIsApprovedTestData data) {
	    // TODO implement Custom Assertion
	    // please implement your own custom assertion here
	    // you can find the parameters defined for your custom matcher under data.<name>CustomMatcher
	    // assertEqual(data.<name>CustomMatcher, result);
	    assertEquals(data.resultCustomMatcher, result.approved);
	}
//endregion

//region Scenarios
	//A new scenario
	@ParameterizedTest(name = "{1} [{index}] {2}")
	@MethodSource({"CheckCreditSource"})
	public void CheckCreditTest(CheckCreditTestData data, String TestName, String TestDescription) {
		ActualResultStorage.setStorage(); //saves the results of the called Methods
		
		assertion(data, data.S1M1.methodName, data.C1, data.S1M1.expectedResult, data.S1M1.call());
	}
//endregion

//region Data

//=========================================================================================================================
//Please modify this section only in the Modeleditor not here in the code, because otherwise it will cause merge conflicts!
//=========================================================================================================================
	//A new scenario
	private static Stream<Arguments> CheckCreditSource() throws Exception {
		return Stream.of(
			Arguments.of(
				new CheckCreditTestData(
					/* AllTogether C1 = */ new AllTogether(new DateTime(2003, 1, 1, 0, 0), "John Brook"),
					/* S1M1 = */ new S1M1Parameters<>(
						/* Integer creditSought = */ 100,
						/* Integer duration = */ 12,
						/* referencingMethodName = */ new String[2],
						/* expectedResult = */ new Result<>(
							/* assertType = */ AssertType.CUSTOM_ASSERTION,
							/* customAction = */ (i, r) -> assertIsApproved(i, r, 
								new CustomMatcherIsApprovedTestData(
									/* resultCustomMatcher = */ true
								)
							)
						)
					)
				),
				/* testCaseName = */ "Valid 18-25",
				/* testCaseDescription = */ ""
			),
			Arguments.of(
				new CheckCreditTestData(
					/* AllTogether C1 = */ new AllTogether(new DateTime(1990, 1, 1, 0, 0), "John Brook"),
					/* S1M1 = */ new S1M1Parameters<>(
						/* Integer creditSought = */ 100,
						/* Integer duration = */ 12,
						/* referencingMethodName = */ new String[2],
						/* expectedResult = */ new Result<>(
							/* assertType = */ AssertType.CUSTOM_ASSERTION,
							/* customAction = */ (i, r) -> assertIsApproved(i, r, 
								new CustomMatcherIsApprovedTestData(
									/* resultCustomMatcher = */ true
								)
							)
						)
					)
				),
				/* testCaseName = */ "Valid 26+",
				/* testCaseDescription = */ ""
			),
			Arguments.of(
				new CheckCreditTestData(
					/* AllTogether C1 = */ new AllTogether(new DateTime(2003, 1, 1, 0, 0), "John Brook"),
					/* S1M1 = */ new S1M1Parameters<>(
						/* Integer creditSought = */ 1001,
						/* Integer duration = */ 25,
						/* referencingMethodName = */ new String[2],
						/* expectedResult = */ new Result<>(
							/* assertType = */ AssertType.CUSTOM_ASSERTION,
							/* customAction = */ (i, r) -> assertIsApproved(i, r, 
								new CustomMatcherIsApprovedTestData(
									/* resultCustomMatcher = */ false
								)
							)
						)
					)
				),
				/* testCaseName = */ "Invalid Credit 18-25",
				/* testCaseDescription = */ "M1:duration: Invalid 18 - 25"
			),
			Arguments.of(
				new CheckCreditTestData(
					/* AllTogether C1 = */ new AllTogether(new DateTime(2003, 1, 1, 0, 0), "John Brook"),
					/* S1M1 = */ new S1M1Parameters<>(
						/* Integer creditSought = */ 100,
						/* Integer duration = */ 25,
						/* referencingMethodName = */ new String[2],
						/* expectedResult = */ new Result<>(
							/* assertType = */ AssertType.CUSTOM_ASSERTION,
							/* customAction = */ (i, r) -> assertIsApproved(i, r, 
								new CustomMatcherIsApprovedTestData(
									/* resultCustomMatcher = */ false
								)
							)
						)
					)
				),
				/* testCaseName = */ "Invalid Duration 18-25",
				/* testCaseDescription = */ "M1:duration: Invalid 25+"
			),
			Arguments.of(
				new CheckCreditTestData(
					/* AllTogether C1 = */ new AllTogether(new DateTime(1990, 1, 1, 0, 0), "John Brook"),
					/* S1M1 = */ new S1M1Parameters<>(
						/* Integer creditSought = */ 10001,
						/* Integer duration = */ 12,
						/* referencingMethodName = */ new String[2],
						/* expectedResult = */ new Result<>(
							/* assertType = */ AssertType.CUSTOM_ASSERTION,
							/* customAction = */ (i, r) -> assertIsApproved(i, r, 
								new CustomMatcherIsApprovedTestData(
									/* resultCustomMatcher = */ false
								)
							)
						)
					)
				),
				/* testCaseName = */ "Invalid Credit 26+",
				/* testCaseDescription = */ "M1:creditSought: Credit 18 - 25"
			),
			Arguments.of(
				new CheckCreditTestData(
					/* AllTogether C1 = */ new AllTogether(new DateTime(1990, 1, 1, 0, 0), "John Brook"),
					/* S1M1 = */ new S1M1Parameters<>(
						/* Integer creditSought = */ 100,
						/* Integer duration = */ 49,
						/* referencingMethodName = */ new String[2],
						/* expectedResult = */ new Result<>(
							/* assertType = */ AssertType.CUSTOM_ASSERTION,
							/* customAction = */ (i, r) -> assertIsApproved(i, r, 
								new CustomMatcherIsApprovedTestData(
									/* resultCustomMatcher = */ false
								)
							)
						)
					)
				),
				/* testCaseName = */ "Invalid Duration 26+",
				/* testCaseDescription = */ "M1:creditSought: Credit Over 25"
			)
		);
	}
//endregion

//region Types

//=========================================================================================================================
//Please modify this section only in the Modeleditor not here in the code, because otherwise it will cause merge conflicts!
//=========================================================================================================================
	static class CheckCreditTestData {
	    public final AllTogether C1;
	    public final S1M1Parameters<CheckCreditTestData> S1M1;
	    
	    public CheckCreditTestData(AllTogether C1, S1M1Parameters<CheckCreditTestData> S1M1) {
	    	this.C1 = C1;
	    	this.S1M1 = S1M1;
	    }
	}

	static class S1M1Parameters<TestData> {
		public final String methodName = "S1M1";
	    public final ObjectWrapper<Integer> creditSought;
	    public final ObjectWrapper<Integer> duration;
	    public final Result<TestData, AllTogether, CreditReturnStatus> expectedResult;
		public S1M1Parameters(Integer creditSought, Integer duration, String[] referencingMethodName, Result<TestData, AllTogether, CreditReturnStatus> expectedResult) {
			this.creditSought = new ObjectWrapper<>(creditSought, referencingMethodName[0]);
			this.duration = new ObjectWrapper<>(duration, referencingMethodName[1]);
	   		this.expectedResult = expectedResult;
	    }
	    
	    public ExceptionFunction<AllTogether, CreditReturnStatus> call() {
	    	return i ->
	    	 i.checkCredit(creditSought.get(), duration.get());
		}
	}

	static class CustomMatcherIsApprovedTestData {
	    public final Boolean resultCustomMatcher;
	    
	    public CustomMatcherIsApprovedTestData(Boolean result) {
	    	this.resultCustomMatcher = result;
	    }
	}
//endregion

//region Utility Classes

//=========================================================================================================================
//Please modify this section only in the Modeleditor not here in the code, because otherwise it will cause merge conflicts!
//=========================================================================================================================
	public static class ObjectWrapper<T> {
		public T object;
		public String referencingMethodName;
		
		public ObjectWrapper(T object, String referencingMethodName) {
			this.object = object;
			this.referencingMethodName = referencingMethodName;
		}
		
		public T get() {
			return ActualResultStorage.getOrDefault(referencingMethodName, object);
		}
	}
	
	public static class ActualResultStorage {
		private static Map<String, Object> actualResultMap = new HashMap<>();
		
		public static void setStorage() {
			actualResultMap = new HashMap<>();
		}
		
		public static <T> void put(String key, T value) {
			actualResultMap.put(key, value);
		}
		
		@SuppressWarnings("unchecked")
		public static <T> T getOrDefault(String key, T defaultValue) {
			return (T) actualResultMap.getOrDefault(key, defaultValue);
		}
	}
	
	static class Result<TestData, TInstance, TReturn> {
		public final AssertType assertType;
		public final TReturn expectedReturnValue;
		public final Class<? extends Throwable> expectedException;
		public final BiConsumer<TInstance, TReturn> customAction;
		public final List<SideEffect<TestData>> sideEffects;
		
		public Result(AssertType assertType) {
			this(assertType, (TReturn) null, null);
		}
	
		public Result(AssertType assertType, List<SideEffect<TestData>> sideEffects) {
			this(assertType, (TReturn) null, sideEffects);
		}
	
		public Result(AssertType assertType, TReturn expectedReturnValue) {
			this(assertType, expectedReturnValue, null);
		}
	
		public Result(AssertType assertType, Class<? extends Throwable> expectedException) {
			this(assertType, expectedException, null);
		}
	
		public Result(AssertType assertType, BiConsumer<TInstance, TReturn> customAction) {
			this(assertType, customAction, null);
		}
	
		public Result(AssertType assertType, TReturn expectedReturnValue, List<SideEffect<TestData>> sideEffects) {
			this(assertType, expectedReturnValue, null, null, sideEffects);
		}
	
		public Result(AssertType assertType, Class<? extends Throwable> expectedException, List<SideEffect<TestData>> sideEffects) {
			this(assertType, null, expectedException, null, sideEffects);
		}
	
		public Result(AssertType assertType, BiConsumer<TInstance, TReturn> customAction, List<SideEffect<TestData>> sideEffects) {
			this(assertType, null, null, customAction, sideEffects);
		}
	
		public Result(AssertType assertType, TReturn expectedReturnValue, Class<? extends Throwable> expectedException,
			BiConsumer<TInstance, TReturn> customAction, List<SideEffect<TestData>> sideEffects) {
			this.assertType = assertType;
			this.expectedReturnValue = expectedReturnValue;
			this.expectedException = expectedException;
			this.customAction = customAction;
			this.sideEffects = sideEffects;
		}
	}
	
	static class SideEffect<TestData> {
	    public final Object expectedValue;
	    public final Function<TestData, Object> actualValueAccessor;
	    
		public SideEffect(Object expectedValue, Function<TestData, Object> actualValueAccessor) {
			this.expectedValue = expectedValue;
			this.actualValueAccessor = actualValueAccessor;
		}
	}
	
	public enum AssertType {
	    EXCEPTION, EXPECTED_VALUE, CUSTOM_ASSERTION
	}
	
	static class VoidR {
	}
	
	private static <I> ExceptionFunction<I, VoidR> asFunc(ExceptionConsumer<I> action) {
		return i -> {
			action.accept(i);
			return null;
		};
	}
	
	@FunctionalInterface
	public interface ExceptionFunction<I, R> {
		R apply(I i) throws Exception;
	}
	
	@FunctionalInterface
	public interface ExceptionConsumer<I> {
		void accept(I i) throws Exception;
	}
	
	private <TestData, I, R> void assertion(TestData data, String methodName, I instance, Result<TestData, I, R> expectedResult, ExceptionFunction<I, R> toApply) {
		if (expectedResult == null) {
			ActualResultStorage.put(methodName, assertDoesNotThrow(() -> toApply.apply(instance)));
			return;
		}
		R actualResult = null;
		if (expectedResult.assertType.equals(AssertType.EXCEPTION)) {
			assertThrows(expectedResult.expectedException, () -> toApply.apply(instance));
		} else {
			actualResult = assertDoesNotThrow(() -> toApply.apply(instance));
			if (expectedResult.assertType.equals(AssertType.EXPECTED_VALUE) &&
					!(expectedResult.expectedReturnValue instanceof VoidR)) {
				assertEquals(expectedResult.expectedReturnValue, actualResult);
			} else if (expectedResult.assertType.equals(AssertType.CUSTOM_ASSERTION)) {
				expectedResult.customAction.accept(instance, actualResult);
			}
			if (expectedResult.sideEffects != null) {
				for (var sideEffect : expectedResult.sideEffects) {
					var sideEffectResult = sideEffect.actualValueAccessor.apply(data);
					assertEquals(sideEffect.expectedValue, sideEffectResult);
				}
			}
		}
		ActualResultStorage.put(methodName, actualResult);
	}
//endregion
}

/*
WARNING: Modification of this comment will make it impossible to merge user-defined changes

BEGIN_CODEGEN_DATA
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
END_CODEGEN_DATA
*/
