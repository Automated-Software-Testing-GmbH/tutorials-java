/*
* DO NOT MODIFY THIS COMMENT
* Generated by devmate
* Test model: 42248a8b-207e-48cb-8804-75b1303e149c
*/
package util.alltogether;

import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;
import java.util.stream.Stream;

import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;
import org.joda.time.DateTime;

@SuppressWarnings("unused")
public class AllTogetherTest {
	
//region Custom Assertions
	private static void assertIsApproved(AllTogether instance, CreditReturnStatus result, CustomMatcherIsApprovedTestData data) {
	    // TODO implement Custom Assertion
	    // please implement your own custom assertion here
	    // you can find the parameters defined for your custom matcher under data.<name>CustomMatcher
	    // assertEqual(data.<name>CustomMatcher, result);
	    assertEquals(data.resultCustomMatcher, result.approved);
	}
//endregion

//region Scenarios
	//A new scenario
	@ParameterizedTest(name = "{1} [{index}] {2}")
	@MethodSource({"ValidatePersonSource"})
	public void ValidatePersonTest(ValidatePersonTestData data, String TestName, String TestDescription) {
		ActualResultStorage.setStorage(); //saves the results of the called Methods
		
		assertion(data, data.S1M1.methodName, data.C1, data.S1M1.expectedResult, data.S1M1.call());
	}
		
	//A new scenario
	@ParameterizedTest(name = "{1} [{index}] {2}")
	@MethodSource({"CheckCreditSource"})
	public void CheckCreditTest(CheckCreditTestData data, String TestName, String TestDescription) {
		ActualResultStorage.setStorage(); //saves the results of the called Methods
		
		assertion(data, data.S2M1.methodName, data.C1, data.S2M1.expectedResult, data.S2M1.call());
	}
//endregion

//region Data

//=========================================================================================================================
//Please modify this section only in the Modeleditor not here in the code, because otherwise it will cause merge conflicts!
//=========================================================================================================================
	//A new scenario
	private static Stream<Arguments> ValidatePersonSource() {
		return Stream.of(
			Arguments.of(
				new ValidatePersonTestData(
					/* AllTogether C1 = */ new AllTogether(new DateTime(2003, 1, 1, 0, 0), "John Brook"),
					/* S1M1 = */ new S1M1Parameters<>(
						/* expectedResult = */ new Result<>(
							/* assertType = */ AssertType.EXPECTED_VALUE
						)
					)
				),
				/* testCaseName = */ "p1",
				/* testCaseDescription = */ ""
			),
			Arguments.of(
				new ValidatePersonTestData(
					/* AllTogether C1 = */ new AllTogether(new DateTime(1990, 1, 1, 0, 0), "John Brook"),
					/* S1M1 = */ new S1M1Parameters<>(
						/* expectedResult = */ new Result<>(
							/* assertType = */ AssertType.EXPECTED_VALUE
						)
					)
				),
				/* testCaseName = */ "p2",
				/* testCaseDescription = */ ""
			),
			Arguments.of(
				new ValidatePersonTestData(
					/* AllTogether C1 = */ new AllTogether(new DateTime(2020, 1, 1, 0, 0), ""),
					/* S1M1 = */ new S1M1Parameters<>(
						/* expectedResult = */ new Result<>(
							/* assertType = */ AssertType.EXCEPTION,
							/* expectedException = */ Exception.class
						)
					)
				),
				/* testCaseName = */ "n1",
				/* testCaseDescription = */ "C1: Too Young"
			),
			Arguments.of(
				new ValidatePersonTestData(
					/* AllTogether C1 = */ new AllTogether(new DateTime(2100, 1, 1, 0, 0), ""),
					/* S1M1 = */ new S1M1Parameters<>(
						/* expectedResult = */ new Result<>(
							/* assertType = */ AssertType.EXCEPTION,
							/* expectedException = */ Exception.class
						)
					)
				),
				/* testCaseName = */ "n2",
				/* testCaseDescription = */ "C1: DOB in future"
			),
			Arguments.of(
				new ValidatePersonTestData(
					/* AllTogether C1 = */ new AllTogether(new DateTime(2000, 1, 1, 0, 0), "X"),
					/* S1M1 = */ new S1M1Parameters<>(
						/* expectedResult = */ new Result<>(
							/* assertType = */ AssertType.EXCEPTION,
							/* expectedException = */ Exception.class
						)
					)
				),
				/* testCaseName = */ "n3",
				/* testCaseDescription = */ "C1: Invalid Name"
			)
		);
	}
		
	//A new scenario
	private static Stream<Arguments> CheckCreditSource() {
		return Stream.of(
			Arguments.of(
				new CheckCreditTestData(
					/* AllTogether C1 = */ new AllTogether(new DateTime(2003, 1, 1, 0, 0), ""),
					/* S2M1 = */ new S2M1Parameters<>(
						/* Integer creditSought = */ 100,
						/* Integer duration = */ 12,
						/* referencingMethodName = */ new String[2],
						/* expectedResult = */ new Result<>(
							/* assertType = */ AssertType.CUSTOM_ASSERTION,
							/* customAction = */ (i, r) -> assertIsApproved(i, r, 
								new CustomMatcherIsApprovedTestData(
									/* resultCustomMatcher = */ true
								)
							)
						)
					)
				),
				/* testCaseName = */ "Valid 18-25",
				/* testCaseDescription = */ ""
			),
			Arguments.of(
				new CheckCreditTestData(
					/* AllTogether C1 = */ new AllTogether(new DateTime(1990, 1, 1, 0, 0), ""),
					/* S2M1 = */ new S2M1Parameters<>(
						/* Integer creditSought = */ 100,
						/* Integer duration = */ 12,
						/* referencingMethodName = */ new String[2],
						/* expectedResult = */ new Result<>(
							/* assertType = */ AssertType.CUSTOM_ASSERTION,
							/* customAction = */ (i, r) -> assertIsApproved(i, r, 
								new CustomMatcherIsApprovedTestData(
									/* resultCustomMatcher = */ true
								)
							)
						)
					)
				),
				/* testCaseName = */ "Valid 26+",
				/* testCaseDescription = */ ""
			),
			Arguments.of(
				new CheckCreditTestData(
					/* AllTogether C1 = */ new AllTogether(new DateTime(2003, 1, 1, 0, 0), ""),
					/* S2M1 = */ new S2M1Parameters<>(
						/* Integer creditSought = */ 2000,
						/* Integer duration = */ 25,
						/* referencingMethodName = */ new String[2],
						/* expectedResult = */ new Result<>(
							/* assertType = */ AssertType.CUSTOM_ASSERTION,
							/* customAction = */ (i, r) -> assertIsApproved(i, r, 
								new CustomMatcherIsApprovedTestData(
									/* resultCustomMatcher = */ false
								)
							)
						)
					)
				),
				/* testCaseName = */ "Invalid 18-25 Credit",
				/* testCaseDescription = */ "M1:duration: Invalid 18 - 25"
			),
			Arguments.of(
				new CheckCreditTestData(
					/* AllTogether C1 = */ new AllTogether(new DateTime(2003, 1, 1, 0, 0), ""),
					/* S2M1 = */ new S2M1Parameters<>(
						/* Integer creditSought = */ 100,
						/* Integer duration = */ 25,
						/* referencingMethodName = */ new String[2],
						/* expectedResult = */ new Result<>(
							/* assertType = */ AssertType.CUSTOM_ASSERTION,
							/* customAction = */ (i, r) -> assertIsApproved(i, r, 
								new CustomMatcherIsApprovedTestData(
									/* resultCustomMatcher = */ false
								)
							)
						)
					)
				),
				/* testCaseName = */ "Invalid 18-25 Duration",
				/* testCaseDescription = */ "M1:duration: Invalid 25+"
			),
			Arguments.of(
				new CheckCreditTestData(
					/* AllTogether C1 = */ new AllTogether(new DateTime(1990, 1, 1, 0, 0), ""),
					/* S2M1 = */ new S2M1Parameters<>(
						/* Integer creditSought = */ 20000,
						/* Integer duration = */ 12,
						/* referencingMethodName = */ new String[2],
						/* expectedResult = */ new Result<>(
							/* assertType = */ AssertType.CUSTOM_ASSERTION,
							/* customAction = */ (i, r) -> assertIsApproved(i, r, 
								new CustomMatcherIsApprovedTestData(
									/* resultCustomMatcher = */ false
								)
							)
						)
					)
				),
				/* testCaseName = */ "Invalid 26+ Credit",
				/* testCaseDescription = */ "M1:creditSought: Credit 18 - 25"
			),
			Arguments.of(
				new CheckCreditTestData(
					/* AllTogether C1 = */ new AllTogether(new DateTime(1990, 1, 1, 0, 0), ""),
					/* S2M1 = */ new S2M1Parameters<>(
						/* Integer creditSought = */ 20000,
						/* Integer duration = */ 50,
						/* referencingMethodName = */ new String[2],
						/* expectedResult = */ new Result<>(
							/* assertType = */ AssertType.CUSTOM_ASSERTION,
							/* customAction = */ (i, r) -> assertIsApproved(i, r, 
								new CustomMatcherIsApprovedTestData(
									/* resultCustomMatcher = */ false
								)
							)
						)
					)
				),
				/* testCaseName = */ "Invalid 26+ Duration",
				/* testCaseDescription = */ "M1:creditSought: Credit Over 25"
			)
		);
	}
//endregion

//region Types

//=========================================================================================================================
//Please modify this section only in the Modeleditor not here in the code, because otherwise it will cause merge conflicts!
//=========================================================================================================================
	static class ValidatePersonTestData {
	    public final AllTogether C1;
	    public final S1M1Parameters<ValidatePersonTestData> S1M1;
	    
	    public ValidatePersonTestData(AllTogether C1, S1M1Parameters<ValidatePersonTestData> S1M1) {
	    	this.C1 = C1;
	    	this.S1M1 = S1M1;
	    }
	}
		
	static class CheckCreditTestData {
	    public final AllTogether C1;
	    public final S2M1Parameters<CheckCreditTestData> S2M1;
	    
	    public CheckCreditTestData(AllTogether C1, S2M1Parameters<CheckCreditTestData> S2M1) {
	    	this.C1 = C1;
	    	this.S2M1 = S2M1;
	    }
	}

	static class S1M1Parameters<TestData> {
		public final String methodName = "S1M1";
	    public final Result<TestData, AllTogether, VoidR> expectedResult;
		public S1M1Parameters(Result<TestData, AllTogether, VoidR> expectedResult) {
	   		this.expectedResult = expectedResult;
	    }
	    
	    public ExceptionFunction<AllTogether, VoidR> call() {
	    	return asFunc(i ->
	    	 i.validateUser());
		}
	}
		
	static class S2M1Parameters<TestData> {
		public final String methodName = "S2M1";
	    public final ObjectWrapper<Integer> creditSought;
	    public final ObjectWrapper<Integer> duration;
	    public final Result<TestData, AllTogether, CreditReturnStatus> expectedResult;
		public S2M1Parameters(Integer creditSought, Integer duration, String[] referencingMethodName, Result<TestData, AllTogether, CreditReturnStatus> expectedResult) {
			this.creditSought = new ObjectWrapper<>(creditSought, referencingMethodName[0]);
			this.duration = new ObjectWrapper<>(duration, referencingMethodName[1]);
	   		this.expectedResult = expectedResult;
	    }
	    
	    public ExceptionFunction<AllTogether, CreditReturnStatus> call() {
	    	return i ->
	    	 i.checkCredit(creditSought.get(), duration.get());
		}
	}

	static class CustomMatcherIsApprovedTestData {
	    public final Boolean resultCustomMatcher;
	    
	    public CustomMatcherIsApprovedTestData(Boolean result) {
	    	this.resultCustomMatcher = result;
	    }
	}
//endregion

//region Utility Classes

//=========================================================================================================================
//Please modify this section only in the Modeleditor not here in the code, because otherwise it will cause merge conflicts!
//=========================================================================================================================
	public static class ObjectWrapper<T> {
		public T object;
		public String referencingMethodName;
		
		public ObjectWrapper(T object, String referencingMethodName) {
			this.object = object;
			this.referencingMethodName = referencingMethodName;
		}
		
		public T get() {
			return ActualResultStorage.getOrDefault(referencingMethodName, object);
		}
	}
	
	public static class ActualResultStorage {
		private static Map<String, Object> actualResultMap = new HashMap<>();
		
		public static void setStorage() {
			actualResultMap = new HashMap<>();
		}
		
		public static <T> void put(String key, T value) {
			actualResultMap.put(key, value);
		}
		
		@SuppressWarnings("unchecked")
		public static <T> T getOrDefault(String key, T defaultValue) {
			return (T) actualResultMap.getOrDefault(key, defaultValue);
		}
	}
	
	static class Result<TestData, TInstance, TReturn> {
		public final AssertType assertType;
		public final TReturn expectedReturnValue;
		public final Class<? extends Throwable> expectedException;
		public final BiConsumer<TInstance, TReturn> customAction;
		public final List<SideEffect<TestData>> sideEffects;
		
		public Result(AssertType assertType) {
			this(assertType, (TReturn) null, null);
		}
	
		public Result(AssertType assertType, List<SideEffect<TestData>> sideEffects) {
			this(assertType, (TReturn) null, sideEffects);
		}
	
		public Result(AssertType assertType, TReturn expectedReturnValue) {
			this(assertType, expectedReturnValue, null);
		}
	
		public Result(AssertType assertType, Class<? extends Throwable> expectedException) {
			this(assertType, expectedException, null);
		}
	
		public Result(AssertType assertType, BiConsumer<TInstance, TReturn> customAction) {
			this(assertType, customAction, null);
		}
	
		public Result(AssertType assertType, TReturn expectedReturnValue, List<SideEffect<TestData>> sideEffects) {
			this(assertType, expectedReturnValue, null, null, sideEffects);
		}
	
		public Result(AssertType assertType, Class<? extends Throwable> expectedException, List<SideEffect<TestData>> sideEffects) {
			this(assertType, null, expectedException, null, sideEffects);
		}
	
		public Result(AssertType assertType, BiConsumer<TInstance, TReturn> customAction, List<SideEffect<TestData>> sideEffects) {
			this(assertType, null, null, customAction, sideEffects);
		}
	
		public Result(AssertType assertType, TReturn expectedReturnValue, Class<? extends Throwable> expectedException,
			BiConsumer<TInstance, TReturn> customAction, List<SideEffect<TestData>> sideEffects) {
			this.assertType = assertType;
			this.expectedReturnValue = expectedReturnValue;
			this.expectedException = expectedException;
			this.customAction = customAction;
			this.sideEffects = sideEffects;
		}
	}
	
	static class SideEffect<TestData> {
	    public final Object expectedValue;
	    public final Function<TestData, Object> actualValueAccessor;
	    
		public SideEffect(Object expectedValue, Function<TestData, Object> actualValueAccessor) {
			this.expectedValue = expectedValue;
			this.actualValueAccessor = actualValueAccessor;
		}
	}
	
	public enum AssertType {
	    EXCEPTION, EXPECTED_VALUE, CUSTOM_ASSERTION
	}
	
	static class VoidR {
	}
	
	private static <I> ExceptionFunction<I, VoidR> asFunc(ExceptionConsumer<I> action) {
		return i -> {
			action.accept(i);
			return null;
		};
	}
	
	@FunctionalInterface
	public interface ExceptionFunction<I, R> {
		R apply(I i) throws Exception;
	}
	
	@FunctionalInterface
	public interface ExceptionConsumer<I> {
		void accept(I i) throws Exception;
	}
	
	private <TestData, I, R> void assertion(TestData data, String methodName, I instance, Result<TestData, I, R> expectedResult, ExceptionFunction<I, R> toApply) {
		if (expectedResult == null) {
			ActualResultStorage.put(methodName, assertDoesNotThrow(() -> toApply.apply(instance)));
			return;
		}
		R actualResult = null;
		if (expectedResult.assertType.equals(AssertType.EXCEPTION)) {
			assertThrows(expectedResult.expectedException, () -> toApply.apply(instance));
		} else {
			actualResult = assertDoesNotThrow(() -> toApply.apply(instance));
			if (expectedResult.assertType.equals(AssertType.EXPECTED_VALUE) &&
					!(expectedResult.expectedReturnValue instanceof VoidR)) {
				assertEquals(expectedResult.expectedReturnValue, actualResult);
			} else if (expectedResult.assertType.equals(AssertType.CUSTOM_ASSERTION)) {
				expectedResult.customAction.accept(instance, actualResult);
			}
			if (expectedResult.sideEffects != null) {
				for (var sideEffect : expectedResult.sideEffects) {
					var sideEffectResult = sideEffect.actualValueAccessor.apply(data);
					assertEquals(sideEffect.expectedValue, sideEffectResult);
				}
			}
		}
		ActualResultStorage.put(methodName, actualResult);
	}
//endregion
}

/*
WARNING: Modification of this comment will make it impossible to merge user-defined changes

BEGIN_CODEGEN_DATA
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
END_CODEGEN_DATA
*/