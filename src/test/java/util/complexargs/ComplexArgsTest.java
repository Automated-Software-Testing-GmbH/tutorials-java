/*
* DO NOT MODIFY THIS COMMENT
* Generated by devmate
* Test model: 87b085e3-d031-49e0-9485-ccb1bbf299c9
*/
package util.complexargs;

import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;
import java.util.stream.Stream;

import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;

import models.User;

@SuppressWarnings("unused")
public class ComplexArgsTest {
	
//region Scenarios
	//A new scenario
	@ParameterizedTest(name = "{1} [{index}] {2}")
	@MethodSource({"Scenario1Source"})
	public void Scenario1Test(Scenario1TestData data, String TestName, String TestDescription) {
		ActualResultStorage.setStorage(); //saves the results of the called Methods
		
		assertion(data, data.S1M1.methodName, null, data.S1M1.expectedResult, data.S1M1.call());
	}
//endregion

//region Data

//=========================================================================================================================
//Please modify this section only in the Modeleditor not here in the code, because otherwise it will cause merge conflicts!
//=========================================================================================================================
	//A new scenario
	private static Stream<Arguments> Scenario1Source() {
		return Stream.of(
			Arguments.of(
				new Scenario1TestData(
					/* S1M1 = */ new S1M1Parameters<>(
						/* User user = */ new User("John Brook", 34),
						/* referencingMethodName = */ "",
						/* expectedResult = */ new Result<>(
							/* assertType = */ AssertType.EXPECTED_VALUE,
							/* expectedReturnValue = */ new User("John Brook", 34, "No bio available")
						)
					)
				),
				/* testCaseName = */ "p1",
				/* testCaseDescription = */ ""
			)
		);
	}
//endregion

//region Types

//=========================================================================================================================
//Please modify this section only in the Modeleditor not here in the code, because otherwise it will cause merge conflicts!
//=========================================================================================================================
	static class Scenario1TestData {
	    public final S1M1Parameters<Scenario1TestData> S1M1;
	    
	    public Scenario1TestData(S1M1Parameters<Scenario1TestData> S1M1) {
	    	this.S1M1 = S1M1;
	    }
	}

	static class S1M1Parameters<TestData> {
		public final String methodName = "S1M1";
	    public final ObjectWrapper<User> user;
	    public final Result<TestData, Object, User> expectedResult;
		public S1M1Parameters(User user, String referencingMethodName, Result<TestData, Object, User> expectedResult) {
			this.user = new ObjectWrapper<>(user, referencingMethodName);
	   		this.expectedResult = expectedResult;
	    }
	    
	    public ExceptionFunction<Object, User> call() {
	    	return i ->
	    	 util.complexargs.ComplexArgs.setDefaultBioString(user.get());
		}
	}
//endregion

//region Utility Classes

//=========================================================================================================================
//Please modify this section only in the Modeleditor not here in the code, because otherwise it will cause merge conflicts!
//=========================================================================================================================
	public static class ObjectWrapper<T> {
		public T object;
		public String referencingMethodName;
		
		public ObjectWrapper(T object, String referencingMethodName) {
			this.object = object;
			this.referencingMethodName = referencingMethodName;
		}
		
		public T get() {
			return ActualResultStorage.getOrDefault(referencingMethodName, object);
		}
	}
	
	public static class ActualResultStorage {
		private static Map<String, Object> actualResultMap = new HashMap<>();
		
		public static void setStorage() {
			actualResultMap = new HashMap<>();
		}
		
		public static <T> void put(String key, T value) {
			actualResultMap.put(key, value);
		}
		
		@SuppressWarnings("unchecked")
		public static <T> T getOrDefault(String key, T defaultValue) {
			return (T) actualResultMap.getOrDefault(key, defaultValue);
		}
	}
	
	static class Result<TestData, TInstance, TReturn> {
		public final AssertType assertType;
		public final TReturn expectedReturnValue;
		public final Class<? extends Throwable> expectedException;
		public final BiConsumer<TInstance, TReturn> customAction;
		public final List<SideEffect<TestData>> sideEffects;
		
		public Result(AssertType assertType) {
			this(assertType, (TReturn) null, null);
		}
	
		public Result(AssertType assertType, List<SideEffect<TestData>> sideEffects) {
			this(assertType, (TReturn) null, sideEffects);
		}
	
		public Result(AssertType assertType, TReturn expectedReturnValue) {
			this(assertType, expectedReturnValue, null);
		}
	
		public Result(AssertType assertType, Class<? extends Throwable> expectedException) {
			this(assertType, expectedException, null);
		}
	
		public Result(AssertType assertType, BiConsumer<TInstance, TReturn> customAction) {
			this(assertType, customAction, null);
		}
	
		public Result(AssertType assertType, TReturn expectedReturnValue, List<SideEffect<TestData>> sideEffects) {
			this(assertType, expectedReturnValue, null, null, sideEffects);
		}
	
		public Result(AssertType assertType, Class<? extends Throwable> expectedException, List<SideEffect<TestData>> sideEffects) {
			this(assertType, null, expectedException, null, sideEffects);
		}
	
		public Result(AssertType assertType, BiConsumer<TInstance, TReturn> customAction, List<SideEffect<TestData>> sideEffects) {
			this(assertType, null, null, customAction, sideEffects);
		}
	
		public Result(AssertType assertType, TReturn expectedReturnValue, Class<? extends Throwable> expectedException,
			BiConsumer<TInstance, TReturn> customAction, List<SideEffect<TestData>> sideEffects) {
			this.assertType = assertType;
			this.expectedReturnValue = expectedReturnValue;
			this.expectedException = expectedException;
			this.customAction = customAction;
			this.sideEffects = sideEffects;
		}
	}
	
	static class SideEffect<TestData> {
	    public final Object expectedValue;
	    public final Function<TestData, Object> actualValueAccessor;
	    
		public SideEffect(Object expectedValue, Function<TestData, Object> actualValueAccessor) {
			this.expectedValue = expectedValue;
			this.actualValueAccessor = actualValueAccessor;
		}
	}
	
	public enum AssertType {
	    EXCEPTION, EXPECTED_VALUE, CUSTOM_ASSERTION
	}
	
	static class VoidR {
	}
	
	private static <I> ExceptionFunction<I, VoidR> asFunc(ExceptionConsumer<I> action) {
		return i -> {
			action.accept(i);
			return null;
		};
	}
	
	@FunctionalInterface
	public interface ExceptionFunction<I, R> {
		R apply(I i) throws Exception;
	}
	
	@FunctionalInterface
	public interface ExceptionConsumer<I> {
		void accept(I i) throws Exception;
	}
	
	private <TestData, I, R> void assertion(TestData data, String methodName, I instance, Result<TestData, I, R> expectedResult, ExceptionFunction<I, R> toApply) {
		if (expectedResult == null) {
			ActualResultStorage.put(methodName, assertDoesNotThrow(() -> toApply.apply(instance)));
			return;
		}
		R actualResult = null;
		if (expectedResult.assertType.equals(AssertType.EXCEPTION)) {
			assertThrows(expectedResult.expectedException, () -> toApply.apply(instance));
		} else {
			actualResult = assertDoesNotThrow(() -> toApply.apply(instance));
			if (expectedResult.assertType.equals(AssertType.EXPECTED_VALUE) &&
					!(expectedResult.expectedReturnValue instanceof VoidR)) {
				assertEquals(expectedResult.expectedReturnValue, actualResult);
			} else if (expectedResult.assertType.equals(AssertType.CUSTOM_ASSERTION)) {
				expectedResult.customAction.accept(instance, actualResult);
			}
			if (expectedResult.sideEffects != null) {
				for (var sideEffect : expectedResult.sideEffects) {
					var sideEffectResult = sideEffect.actualValueAccessor.apply(data);
					assertEquals(sideEffect.expectedValue, sideEffectResult);
				}
			}
		}
		ActualResultStorage.put(methodName, actualResult);
	}
//endregion
}

/*
WARNING: Modification of this comment will make it impossible to merge user-defined changes

BEGIN_CODEGEN_DATA
H4sIAAAAAAAA/+0ZWW/bNvhZAfIfWD8MUqHKyLan2fHiJh6WoTkQO2mBYSgYmXbYyJJGSjkW+L+PlyhSopI4bZGXBoh
tUd99f1IO42u4RKAscBLF2SpP0B0kSzrY3trewqs8IwWgBSxwDDKyjL6UKS7YZ44LRCKY42hMKSIFzlIaQfHzIEP0OC
tmVyS7HbyQxuTfEib0pdiCtaXBF3gDI6Hin5BeHcF84Lj1AdPCdd4BvijTmHON3uN9xrtcIfIo2B/qhwuIFgTBVTQVX
6bgbY1zSOCKRqf8C7ED/B+az5ApeSdOTrIbPGfXY7Jk4qYF3QTpCBVX2XyalSRGpoirbI4SGp1Tof/21t60zHOCKP0I
SYrTJfV7ZVpSNO8F21t5eZkwR8YJ8xTYl+HGpKFcA/CwveVtb/X7BC2ZncA0RikkOKPsuN8fgxTdAqrO2NFeywR+yq7
BLug97KzB3w84naO79T/g4ec1Z+3tmRr4D72K/o486a05kBLwJsNzLcCOIG5dHcACgjn7CAFzGtMS8NNjxt86OEA0Jj
jnbg+Eet44LlhonyFaJsW0yAjLvYii6qcfDEC/T+ENoqC4QoAIOAqyhbiMYZKgOZB6cLN4/B9W8e9LgfhnNN052olWA
lBKlZZJYt5DdzmKCzSXoph3OBc/CJgzvTV3B0rn0iPcu9o73ALyYPe1/jjz0wRBingQ4sU9MxKmgCKRZyBLk3uAU2G5
Ix6kaI6ZmUGaFeAKEVTdi9m9EFyiGLIoBRk7IreY/cIFuMVJAuQ5S+8lh00XLD4K+uaVNXdlRE7wDSxQVS1lNRnqZB+
BRsT7KiYJKkqSKvgoW/j80NN4+sTj/FppoO55/beAhw/Lv7d9IRm/0jlKh6MKkEPyagFK/qHB+ZHf+yu7SsF7kmXXvR
D88msQGkgELZjb0phl15GObEmg1zMB7diuWchrQxIOrHrGfa5IjfV1NPl0OtmfTQ4+X4w/nE9CE6tmwW13AZMSPaFKC
HrHGbjEGWBlHyfwMkGiLIm/6of6rtRmjApm5n0W4oau+U6vfd8oNZVJBIyg+FQyc23pj2x+Nc09lbKyL7Y7DU9TwP5U
d1rgFCbN/GphjQTEQKHaFNpZ/DxqgRbF496JVMabjNYy1FpK2fRrsqIE2YrJBroyc7zH8XsDlx1OLr+wGPlIYJ4jMuS
5NxKlxQmsSkDFPlTYIZB4duUYGKLZ8vu6gOl+76xO4WYMVUGWtlXlkRcUW8WRLxk7OQZKbUWkVQrbGlZOa0fJ5C5Goq
JUs+vQFl5OCnVIqEaCwbtRddRaLCJj6uOTzwFaQCbIe5xJOwrdoiUq1AjirR8vXeeMPi7uwT6Psh9F7BU1rzLFSns7c
md2us9AJm5befZINg2qkVfBWsT9itrjGWmlmERgWWHIIe90zRrdcq0bws2ACGLFTqWGa/xnYCdEpYHfUUWkfFZCeB0W
d7BQRrfHQ7bWDqWhqpo0AtDAZfdV9VE7M6s7QdMDipZYl8w1Rmn9PHpNyymiPFoE4bxk25d06TW6D5llb/i81cEk4uA
CTkLZLJzbaXyF4mu5oLqEEJ6sXWSLMpenF6ZEytn+LGha1Ha2IGERaDrY8myrlcwOUwaQxixAZnIQdbXTeqA1Zt1BC0
xRcE22bWBRbYe/M+CClWUKxCMXPtLWHU03jzZ2/cRk6FIhLmmRrcaxG5k/phlO8RxNFgvGqJ4kRoDqU9oMVGk732kLs
yT49XHIHChFCtT2zD9rFz2TevhMiZ8thYmzuTCPuLlTAgfsi42xSeQ8KZCGfLE4G4RipzQm0IsFecQvXx1Bnf4Lv0lI
beLSr9ZFCtwRAF+ryQbR8I0UkZ824e+W4Bu6Ssj9nU0SQfPxS6M/NVcY81FLV5uycbQyBobdmCS8qQYDbXUgCWXowIC
a3aarbbvs4d7o5RimBdVKtQD1PtZcK6sRTqCO45gNOplehM0pW8vku5iGG3KwPGpRMuze9JGDDg8Bt/yOqRel5cocbi
qTTj7tT05nhyfHIWg8wAP759PZydHn8XQ6OeMQHR67YFPnmaBXcbRH5+HhyLEbH4YSkVmI8kNfg+gMOhTWq3uJsTDXw
yx/WQRjjupjmf8VHC8W0hiDWra9SgCYHKYFIgsYo9pIuDpyC3ym+J4BtkMl9/4hwAHbQPn7M2DlyUuZmaoLTmKiV+o9
xa0yuxGEUmZJRL/3cL+RMd9+ME66drXGaEmz+UKky15FNuamUh7EC+A3n7HsyhlAedS18vEVxRSv/ebUZzvUO80skt6
pdAgCKy7qDefM2jfAbh0xbTmNyhsh8b7V6CiRTqJAr1nGu9UmKUc7flx+KTJACUWOLU53gg0sIg2yuZpmgQjATz9tyw
fxb7pUNLtQxT1byMzXtvLM19jPoBRaflO6KPNsqlKzxtVCNaiYTU4XHJ0lLoG6TGz2xTd29HsLVtX9G0iMdgl+A90EN
KJnI+nIqI9cHUTFBS8ESuqGMwz0Rstr8qrw17Xy4uNZCd20XvMJJrv+H7bqLKN7IQAA
END_CODEGEN_DATA
*/
