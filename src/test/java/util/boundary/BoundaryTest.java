/*
* DO NOT MODIFY THIS COMMENT
* Generated by devmate
* Test model: 9b4ec982-42d1-4075-adaa-bca115075788
*/
package util.boundary;

import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;
import java.util.stream.Stream;

import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;

@SuppressWarnings("unused")
public class BoundaryTest {
	
//region Scenarios
	//A new scenario
	@ParameterizedTest(name = "{1} [{index}] {2}")
	@MethodSource({"Scenario1Source"})
	public void Scenario1Test(Scenario1TestData data, String TestName, String TestDescription) {
		ActualResultStorage.setStorage(); //saves the results of the called Methods
		
		assertion(data, data.S1M1.methodName, null, data.S1M1.expectedResult, data.S1M1.call());
	}
//endregion

//region Data

//=========================================================================================================================
//Please modify this section only in the Modeleditor not here in the code, because otherwise it will cause merge conflicts!
//=========================================================================================================================
	//A new scenario
	private static Stream<Arguments> Scenario1Source() {
		return Stream.of(
			Arguments.of(
				new Scenario1TestData(
					/* S1M1 = */ new S1M1Parameters<>(
						/* Integer age = */ 22,
						/* referencingMethodName = */ "",
						/* expectedResult = */ new Result<>(
							/* assertType = */ AssertType.EXPECTED_VALUE,
							/* expectedReturnValue = */ true
						)
					)
				),
				/* testCaseName = */ "p1",
				/* testCaseDescription = */ ""
			),
			Arguments.of(
				new Scenario1TestData(
					/* S1M1 = */ new S1M1Parameters<>(
						/* Integer age = */ 18,
						/* referencingMethodName = */ "",
						/* expectedResult = */ new Result<>(
							/* assertType = */ AssertType.EXPECTED_VALUE,
							/* expectedReturnValue = */ true
						)
					)
				),
				/* testCaseName = */ "p2",
				/* testCaseDescription = */ ""
			),
			Arguments.of(
				new Scenario1TestData(
					/* S1M1 = */ new S1M1Parameters<>(
						/* Integer age = */ 19,
						/* referencingMethodName = */ "",
						/* expectedResult = */ new Result<>(
							/* assertType = */ AssertType.EXPECTED_VALUE,
							/* expectedReturnValue = */ true
						)
					)
				),
				/* testCaseName = */ "p3",
				/* testCaseDescription = */ ""
			),
			Arguments.of(
				new Scenario1TestData(
					/* S1M1 = */ new S1M1Parameters<>(
						/* Integer age = */ 25,
						/* referencingMethodName = */ "",
						/* expectedResult = */ new Result<>(
							/* assertType = */ AssertType.EXPECTED_VALUE,
							/* expectedReturnValue = */ true
						)
					)
				),
				/* testCaseName = */ "p4",
				/* testCaseDescription = */ ""
			),
			Arguments.of(
				new Scenario1TestData(
					/* S1M1 = */ new S1M1Parameters<>(
						/* Integer age = */ 10,
						/* referencingMethodName = */ "",
						/* expectedResult = */ new Result<>(
							/* assertType = */ AssertType.EXPECTED_VALUE,
							/* expectedReturnValue = */ false
						)
					)
				),
				/* testCaseName = */ "n1",
				/* testCaseDescription = */ "M1:age: invalid"
			),
			Arguments.of(
				new Scenario1TestData(
					/* S1M1 = */ new S1M1Parameters<>(
						/* Integer age = */ 30,
						/* referencingMethodName = */ "",
						/* expectedResult = */ new Result<>(
							/* assertType = */ AssertType.EXPECTED_VALUE,
							/* expectedReturnValue = */ false
						)
					)
				),
				/* testCaseName = */ "n2",
				/* testCaseDescription = */ "M1:age: invalid"
			),
			Arguments.of(
				new Scenario1TestData(
					/* S1M1 = */ new S1M1Parameters<>(
						/* Integer age = */ 17,
						/* referencingMethodName = */ "",
						/* expectedResult = */ new Result<>(
							/* assertType = */ AssertType.EXPECTED_VALUE,
							/* expectedReturnValue = */ false
						)
					)
				),
				/* testCaseName = */ "n3",
				/* testCaseDescription = */ "M1:age: invalid boundaries"
			),
			Arguments.of(
				new Scenario1TestData(
					/* S1M1 = */ new S1M1Parameters<>(
						/* Integer age = */ 26,
						/* referencingMethodName = */ "",
						/* expectedResult = */ new Result<>(
							/* assertType = */ AssertType.EXPECTED_VALUE,
							/* expectedReturnValue = */ false
						)
					)
				),
				/* testCaseName = */ "n4",
				/* testCaseDescription = */ "M1:age: invalid boundaries"
			)
		);
	}
//endregion

//region Types

//=========================================================================================================================
//Please modify this section only in the Modeleditor not here in the code, because otherwise it will cause merge conflicts!
//=========================================================================================================================
	static class Scenario1TestData {
	    public final S1M1Parameters<Scenario1TestData> S1M1;
	    
	    public Scenario1TestData(S1M1Parameters<Scenario1TestData> S1M1) {
	    	this.S1M1 = S1M1;
	    }
	}

	static class S1M1Parameters<TestData> {
		public final String methodName = "S1M1";
	    public final ObjectWrapper<Integer> age;
	    public final Result<TestData, Object, Boolean> expectedResult;
		public S1M1Parameters(Integer age, String referencingMethodName, Result<TestData, Object, Boolean> expectedResult) {
			this.age = new ObjectWrapper<>(age, referencingMethodName);
	   		this.expectedResult = expectedResult;
	    }
	    
	    public ExceptionFunction<Object, Boolean> call() {
	    	return i ->
	    	 util.boundary.Boundary.isInsurable(age.get());
		}
	}
//endregion

//region Utility Classes

//=========================================================================================================================
//Please modify this section only in the Modeleditor not here in the code, because otherwise it will cause merge conflicts!
//=========================================================================================================================
	public static class ObjectWrapper<T> {
		public T object;
		public String referencingMethodName;
		
		public ObjectWrapper(T object, String referencingMethodName) {
			this.object = object;
			this.referencingMethodName = referencingMethodName;
		}
		
		public T get() {
			return ActualResultStorage.getOrDefault(referencingMethodName, object);
		}
	}
	
	public static class ActualResultStorage {
		private static Map<String, Object> actualResultMap = new HashMap<>();
		
		public static void setStorage() {
			actualResultMap = new HashMap<>();
		}
		
		public static <T> void put(String key, T value) {
			actualResultMap.put(key, value);
		}
		
		@SuppressWarnings("unchecked")
		public static <T> T getOrDefault(String key, T defaultValue) {
			return (T) actualResultMap.getOrDefault(key, defaultValue);
		}
	}
	
	static class Result<TestData, TInstance, TReturn> {
		public final AssertType assertType;
		public final TReturn expectedReturnValue;
		public final Class<? extends Throwable> expectedException;
		public final BiConsumer<TInstance, TReturn> customAction;
		public final List<SideEffect<TestData>> sideEffects;
		
		public Result(AssertType assertType) {
			this(assertType, (TReturn) null, null);
		}
	
		public Result(AssertType assertType, List<SideEffect<TestData>> sideEffects) {
			this(assertType, (TReturn) null, sideEffects);
		}
	
		public Result(AssertType assertType, TReturn expectedReturnValue) {
			this(assertType, expectedReturnValue, null);
		}
	
		public Result(AssertType assertType, Class<? extends Throwable> expectedException) {
			this(assertType, expectedException, null);
		}
	
		public Result(AssertType assertType, BiConsumer<TInstance, TReturn> customAction) {
			this(assertType, customAction, null);
		}
	
		public Result(AssertType assertType, TReturn expectedReturnValue, List<SideEffect<TestData>> sideEffects) {
			this(assertType, expectedReturnValue, null, null, sideEffects);
		}
	
		public Result(AssertType assertType, Class<? extends Throwable> expectedException, List<SideEffect<TestData>> sideEffects) {
			this(assertType, null, expectedException, null, sideEffects);
		}
	
		public Result(AssertType assertType, BiConsumer<TInstance, TReturn> customAction, List<SideEffect<TestData>> sideEffects) {
			this(assertType, null, null, customAction, sideEffects);
		}
	
		public Result(AssertType assertType, TReturn expectedReturnValue, Class<? extends Throwable> expectedException,
			BiConsumer<TInstance, TReturn> customAction, List<SideEffect<TestData>> sideEffects) {
			this.assertType = assertType;
			this.expectedReturnValue = expectedReturnValue;
			this.expectedException = expectedException;
			this.customAction = customAction;
			this.sideEffects = sideEffects;
		}
	}
	
	static class SideEffect<TestData> {
	    public final Object expectedValue;
	    public final Function<TestData, Object> actualValueAccessor;
	    
		public SideEffect(Object expectedValue, Function<TestData, Object> actualValueAccessor) {
			this.expectedValue = expectedValue;
			this.actualValueAccessor = actualValueAccessor;
		}
	}
	
	public enum AssertType {
	    EXCEPTION, EXPECTED_VALUE, CUSTOM_ASSERTION
	}
	
	static class VoidR {
	}
	
	private static <I> ExceptionFunction<I, VoidR> asFunc(ExceptionConsumer<I> action) {
		return i -> {
			action.accept(i);
			return null;
		};
	}
	
	@FunctionalInterface
	public interface ExceptionFunction<I, R> {
		R apply(I i) throws Exception;
	}
	
	@FunctionalInterface
	public interface ExceptionConsumer<I> {
		void accept(I i) throws Exception;
	}
	
	private <TestData, I, R> void assertion(TestData data, String methodName, I instance, Result<TestData, I, R> expectedResult, ExceptionFunction<I, R> toApply) {
		if (expectedResult == null) {
			ActualResultStorage.put(methodName, assertDoesNotThrow(() -> toApply.apply(instance)));
			return;
		}
		R actualResult = null;
		if (expectedResult.assertType.equals(AssertType.EXCEPTION)) {
			assertThrows(expectedResult.expectedException, () -> toApply.apply(instance));
		} else {
			actualResult = assertDoesNotThrow(() -> toApply.apply(instance));
			if (expectedResult.assertType.equals(AssertType.EXPECTED_VALUE) &&
					!(expectedResult.expectedReturnValue instanceof VoidR)) {
				assertEquals(expectedResult.expectedReturnValue, actualResult);
			} else if (expectedResult.assertType.equals(AssertType.CUSTOM_ASSERTION)) {
				expectedResult.customAction.accept(instance, actualResult);
			}
			if (expectedResult.sideEffects != null) {
				for (var sideEffect : expectedResult.sideEffects) {
					var sideEffectResult = sideEffect.actualValueAccessor.apply(data);
					assertEquals(sideEffect.expectedValue, sideEffectResult);
				}
			}
		}
		ActualResultStorage.put(methodName, actualResult);
	}
//endregion
}

/*
WARNING: Modification of this comment will make it impossible to merge user-defined changes

BEGIN_CODEGEN_DATA
H4sIAAAAAAAA/+1aW2/bNhR+doD8B9YPg1S48pzuWjte3MTDAtRNELtpgWEoGIlO2MqSRlJOs8D/fbxJInVJ7LRdMqQ
FqljU4bl950JSSqD/EZ4jkDIcemdxGgWQXPW3t7a38CKJCQOUQYZ9EJNz70MaYcavCWaIeDDB3ohSRBiOI+pB+fMgRv
R1zGYXJL7s35HH+O8UhvSus6VoalrwAS6hJ+37A9KLCUz6NY9eYcrqxhvI52nkC6neS7zPZacLRG4k+13/qCOijCC48
Kbyj6l41eIEErig3rH4g/gA/gcFM2Rq3jgnIfESB/x+RM65uhGjm0yaIHYRB9M4JT6SKu5N0yQhiNK3kEQ4OqdOO41S
ioK2u72VpGchR8wPOSTgpQ4qoSe43t5qbW91uwSdc2+AqY8iSHBM+XC3OwIRugRUj/GhvYqhTsTvwS5oX/dW4M9rHAX
o0+ovcL2zEnJbe6aeznU7499TI+2VINLaLWMc5Ar0JHPr7gAyCAJ+6QAODTcRiNHXXL41cICoT3AiwHWlea2Rz3gAny
CahmzKYsLTy6Mo++m4fdDtUrhEFLALBIikoyCey1sfhiEKgLJDuKUl/sMsyh2lkLh6096k5y0kodIqSsPQfIY+JchnK
FCqmE+EFMd1OZKtlYADRYFCRECboyM8oAZ27+ufEH4cIkgRWMQBnl9xJ2EKKJLZBOIovAI4kp6bxAHirsPczSCKGbhA
BGXPfP6sA86QD3mIgpgPkUvMf2EGLnEYAjXOk/hc0EZzHh+MPrlny+syIiF4CRnKaqKqGYM8pYegFPGOjkmCWEoiTe/
Fc0cMtvJ5+UhLyKukgX7W6j4FInx4/j3tSs3EXZ6jdDDMCAXlYcTQOSJAdBc5YWenYzwmaM4BinyeR5M8hhVhu20S2l
FcyFb3hkxBrHvAVaJZjfJ7b/zueLw/Gx+8Px29ejPumLMKEcJLpzBM9XRGUpQRuvqH/utqDnw6427a5yFqWJD02tXnR
qnIDJU0mtV/i0bvl0eExs6DR+PXR4TG84eOxs6PjwiNHx46Gr3v/3dozPkG5m5wROs1jknvBffPC76+WcIQB/eIzvNH
hc56jeThoNP7+TGhs15jKaED9KkHRvQ+W85Pjwmo9XrOrUCJ622bWGEe/baLvTfLW3qrqg6DqicsYnsK+D99KjPHEQz
LqVOZNZQUfT3V5lBN0PW4ubkqLYGOp5PZFLRSoVYxyuZfsJVbb9swdXC0MJO6Lea3+3V+ODr7wGPkLYFJgshAF42hqB
q15DrrMwU6en4HvIxjHn7RsFQv+oZ+thGOUaDy467aqtTZWKo+klBeVgVQlCzb1qEjJdeKdLXxmkWlBlaNzMCrRsv4k
49kzclOaAcV7dVhWREd+iwFg2fDbMg+PveyI08P08OIpgSehUjY450jpo/dWquby9YbzhCzK7AvIuxbAbtHy7MEsVLe
DtaZneozEMvHVnrdkEKSzqC1mDsZt5vT0EoqNYFngqGHetK0sGjWa1VSbgZkEGtxOhfqjrw52RE5QHPIx5yG0qH0sxK
i1eDxGhHa6faR6AQmA+WorBDxemnM5c91wdFvg3ipccsIaF7yFYF5dK+tXo9f2XOaqYgWyThJmaMh/YiuOtyzS7G4ah
DiCXJJp6hsEbWvY/wL5H9Ub2TqlJBIFhDZqgRq9NTUSIPtzNyyR22wJQuLQRlgC9lK/5jxoslg5PMAmalVZ10rLVavx
sK2XyHTHOqWsVViWW0Hv3FixssyBfJloqjeRQ/LG0Z1dvEucFBngp9SFi9Gfv1k8QJyMMUBGs/nXFCxihgCmo/ScqAq
3zm1vjBLglMMdziASiVXvzES1wKiNbl31tR4bS3MOZsrcwPMjRrU0N7ZGZtEzq0K5ZR3VmeDUGzUxiS6syI34PLZEdS
IX+eLhNQmkH62LUrhhgD4XEs2iIYvZIi62oy/WoJvCJXU+yu7xIPmWUupP5W3Lea5SlObsufkxhgz7Mak6E0zOGmlAy
kqwwZOVO42TW27zh/1u3m1DMsVzY2qEOZ7sPJeMlvCyakj3+cLnZgY2/98lZ3r5NQJ7WwowULU4mT4vYxRDR8RAvX61
6x6UZQuzMVN5tLxu/3x8ezw6HUHlE7rwP6b6exo8n40nY5PBEUDYqd81Xki+WUS7aXz4HBYsx8+7KiJ3ENUDDo5SZ5B
h9J7RS8xdsjFYlZ8BgV9MdXBKv8zOlEslDP6hW57mQIwFGcRZA59VDgJZ0P1Cp9ouSeA76HCK+cQYJfvQMWXYcDKk7s
KM02XkuSKXpt3m7TM7UYQKp0Vk/xbn/qvkMwvfrikvHZVltGKZ/kjoCZ/sXgkXKURxHPglM9VdtUaQCNat+UTWxRTve
o3gQ7fQz3LhXkKncwG17XiotjhnFj7DbBbRExVT6Pyekh+SWh0FC9PIjffZhlfDZZZ1bTjm/VXKgMUUlSzi8s7wQYeU
Q7Z3EyzQLjgu++21fH8kyYTzS6USY/nKvNzX7XMDzTX4NSxcNO2aPdsalK5xhVKlbiYTS4vOHmW1CnU5GKzLz6xo781
51XdWUJitEvwAjQzyCe27El5ZBRDdR1Ex4UoBFrrEhjG9FLLK8vK5q8K4+VlrYQue698gsnv/wVVnBaxUiwAAA==
END_CODEGEN_DATA
*/
