/*
* DO NOT MODIFY THIS COMMENT
* Generated by devmate
* Test model: bd4fd3d3-50b1-45aa-a4e5-954c356c5d26
*/
package util.exceptions;

import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;
import java.util.stream.Stream;

import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;

@SuppressWarnings("unused")
public class ExceptionDemoTest {
	
//region Scenarios
	//A new scenario
	@ParameterizedTest(name = "{1} [{index}] {2}")
	@MethodSource({"Scenario1Source"})
	public void Scenario1Test(Scenario1TestData data, String TestName, String TestDescription) {
		ActualResultStorage.setStorage(); //saves the results of the called Methods
		
		assertion(data, data.S1M1.methodName, null, data.S1M1.expectedResult, data.S1M1.call());
	}
//endregion

//region Data

//=========================================================================================================================
//Please modify this section only in the Modeleditor not here in the code, because otherwise it will cause merge conflicts!
//=========================================================================================================================
	//A new scenario
	private static Stream<Arguments> Scenario1Source() {
		return Stream.of(
			Arguments.of(
				new Scenario1TestData(
					/* S1M1 = */ new S1M1Parameters<>(
						/* Integer number = */ 100,
						/* Integer divisor = */ 20,
						/* referencingMethodName = */ new String[2],
						/* expectedResult = */ new Result<>(
							/* assertType = */ AssertType.EXPECTED_VALUE,
							/* expectedReturnValue = */ 5d
						)
					)
				),
				/* testCaseName = */ "p1",
				/* testCaseDescription = */ ""
			),
			Arguments.of(
				new Scenario1TestData(
					/* S1M1 = */ new S1M1Parameters<>(
						/* Integer number = */ 100,
						/* Integer divisor = */ 0,
						/* referencingMethodName = */ new String[2],
						/* expectedResult = */ new Result<>(
							/* assertType = */ AssertType.EXCEPTION,
							/* expectedException = */ DivideByZeroException.class
						)
					)
				),
				/* testCaseName = */ "n1",
				/* testCaseDescription = */ "M1:divisor: invalid"
			)
		);
	}
//endregion

//region Types

//=========================================================================================================================
//Please modify this section only in the Modeleditor not here in the code, because otherwise it will cause merge conflicts!
//=========================================================================================================================
	static class Scenario1TestData {
	    public final S1M1Parameters<Scenario1TestData> S1M1;
	    
	    public Scenario1TestData(S1M1Parameters<Scenario1TestData> S1M1) {
	    	this.S1M1 = S1M1;
	    }
	}

	static class S1M1Parameters<TestData> {
		public final String methodName = "S1M1";
	    public final ObjectWrapper<Integer> number;
	    public final ObjectWrapper<Integer> divisor;
	    public final Result<TestData, Object, Double> expectedResult;
		public S1M1Parameters(Integer number, Integer divisor, String[] referencingMethodName, Result<TestData, Object, Double> expectedResult) {
			this.number = new ObjectWrapper<>(number, referencingMethodName[0]);
			this.divisor = new ObjectWrapper<>(divisor, referencingMethodName[1]);
	   		this.expectedResult = expectedResult;
	    }
	    
	    public ExceptionFunction<Object, Double> call() {
	    	return i ->
	    	 util.exceptions.ExceptionDemo.userException(number.get(), divisor.get());
		}
	}
//endregion

//region Utility Classes

//=========================================================================================================================
//Please modify this section only in the Modeleditor not here in the code, because otherwise it will cause merge conflicts!
//=========================================================================================================================
	public static class ObjectWrapper<T> {
		public T object;
		public String referencingMethodName;
		
		public ObjectWrapper(T object, String referencingMethodName) {
			this.object = object;
			this.referencingMethodName = referencingMethodName;
		}
		
		public T get() {
			return ActualResultStorage.getOrDefault(referencingMethodName, object);
		}
	}
	
	public static class ActualResultStorage {
		private static Map<String, Object> actualResultMap = new HashMap<>();
		
		public static void setStorage() {
			actualResultMap = new HashMap<>();
		}
		
		public static <T> void put(String key, T value) {
			actualResultMap.put(key, value);
		}
		
		@SuppressWarnings("unchecked")
		public static <T> T getOrDefault(String key, T defaultValue) {
			return (T) actualResultMap.getOrDefault(key, defaultValue);
		}
	}
	
	static class Result<TestData, TInstance, TReturn> {
		public final AssertType assertType;
		public final TReturn expectedReturnValue;
		public final Class<? extends Throwable> expectedException;
		public final BiConsumer<TInstance, TReturn> customAction;
		public final List<SideEffect<TestData>> sideEffects;
		
		public Result(AssertType assertType) {
			this(assertType, (TReturn) null, null);
		}
	
		public Result(AssertType assertType, List<SideEffect<TestData>> sideEffects) {
			this(assertType, (TReturn) null, sideEffects);
		}
	
		public Result(AssertType assertType, TReturn expectedReturnValue) {
			this(assertType, expectedReturnValue, null);
		}
	
		public Result(AssertType assertType, Class<? extends Throwable> expectedException) {
			this(assertType, expectedException, null);
		}
	
		public Result(AssertType assertType, BiConsumer<TInstance, TReturn> customAction) {
			this(assertType, customAction, null);
		}
	
		public Result(AssertType assertType, TReturn expectedReturnValue, List<SideEffect<TestData>> sideEffects) {
			this(assertType, expectedReturnValue, null, null, sideEffects);
		}
	
		public Result(AssertType assertType, Class<? extends Throwable> expectedException, List<SideEffect<TestData>> sideEffects) {
			this(assertType, null, expectedException, null, sideEffects);
		}
	
		public Result(AssertType assertType, BiConsumer<TInstance, TReturn> customAction, List<SideEffect<TestData>> sideEffects) {
			this(assertType, null, null, customAction, sideEffects);
		}
	
		public Result(AssertType assertType, TReturn expectedReturnValue, Class<? extends Throwable> expectedException,
			BiConsumer<TInstance, TReturn> customAction, List<SideEffect<TestData>> sideEffects) {
			this.assertType = assertType;
			this.expectedReturnValue = expectedReturnValue;
			this.expectedException = expectedException;
			this.customAction = customAction;
			this.sideEffects = sideEffects;
		}
	}
	
	static class SideEffect<TestData> {
	    public final Object expectedValue;
	    public final Function<TestData, Object> actualValueAccessor;
	    
		public SideEffect(Object expectedValue, Function<TestData, Object> actualValueAccessor) {
			this.expectedValue = expectedValue;
			this.actualValueAccessor = actualValueAccessor;
		}
	}
	
	public enum AssertType {
	    EXCEPTION, EXPECTED_VALUE, CUSTOM_ASSERTION
	}
	
	static class VoidR {
	}
	
	private static <I> ExceptionFunction<I, VoidR> asFunc(ExceptionConsumer<I> action) {
		return i -> {
			action.accept(i);
			return null;
		};
	}
	
	@FunctionalInterface
	public interface ExceptionFunction<I, R> {
		R apply(I i) throws Exception;
	}
	
	@FunctionalInterface
	public interface ExceptionConsumer<I> {
		void accept(I i) throws Exception;
	}
	
	private <TestData, I, R> void assertion(TestData data, String methodName, I instance, Result<TestData, I, R> expectedResult, ExceptionFunction<I, R> toApply) {
		if (expectedResult == null) {
			ActualResultStorage.put(methodName, assertDoesNotThrow(() -> toApply.apply(instance)));
			return;
		}
		R actualResult = null;
		if (expectedResult.assertType.equals(AssertType.EXCEPTION)) {
			assertThrows(expectedResult.expectedException, () -> toApply.apply(instance));
		} else {
			actualResult = assertDoesNotThrow(() -> toApply.apply(instance));
			if (expectedResult.assertType.equals(AssertType.EXPECTED_VALUE) &&
					!(expectedResult.expectedReturnValue instanceof VoidR)) {
				assertEquals(expectedResult.expectedReturnValue, actualResult);
			} else if (expectedResult.assertType.equals(AssertType.CUSTOM_ASSERTION)) {
				expectedResult.customAction.accept(instance, actualResult);
			}
			if (expectedResult.sideEffects != null) {
				for (var sideEffect : expectedResult.sideEffects) {
					var sideEffectResult = sideEffect.actualValueAccessor.apply(data);
					assertEquals(sideEffect.expectedValue, sideEffectResult);
				}
			}
		}
		ActualResultStorage.put(methodName, actualResult);
	}
//endregion
}

/*
WARNING: Modification of this comment will make it impossible to merge user-defined changes

BEGIN_CODEGEN_DATA
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
END_CODEGEN_DATA
*/
